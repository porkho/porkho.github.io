{"meta":{"title":"CodeTrigger","subtitle":"","description":"Know more ,learn more","author":"zj","url":"http://example.com","root":"/"},"pages":[{"title":"tags","date":"2022-10-03T07:14:09.000Z","updated":"2022-10-03T07:15:53.128Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-10-03T03:30:25.000Z","updated":"2022-10-03T04:03:14.057Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"reading","date":"2022-10-03T03:36:21.000Z","updated":"2022-10-03T03:36:21.801Z","comments":true,"path":"reading/index.html","permalink":"http://example.com/reading/index.html","excerpt":"","text":""}],"posts":[{"title":"一文详解在线人数统计","slug":"一文详解在线人数统计","date":"2022-10-09T07:09:06.000Z","updated":"2022-10-09T07:26:01.277Z","comments":true,"path":"2022/10/09/一文详解在线人数统计/","link":"","permalink":"http://example.com/2022/10/09/%E4%B8%80%E6%96%87%E8%AF%A6%E8%A7%A3%E5%9C%A8%E7%BA%BF%E4%BA%BA%E6%95%B0%E7%BB%9F%E8%AE%A1/","excerpt":"在线人数的统计","text":"在线人数的统计 使用场景 在视频场景下，经常可以看到当前有多少人在看，或者某些场景下，需要我们计算直播间的瞬时人数，作为后端人员，sql编写是必须的，但是这种场景的sql在怎么编写呢？ 要实现动态计算访客，可以给sql打一个数据标签，进入（访问）时记录为1，退出时记录为-1。 实现步骤 1、取用户进入直播间时为1，退出为-1。 这里贴上nowCode原题目 https://www.nowcoder.com/practice/d69677e41f9a4bf3b3ed7a42573e9490 12345678910111213141516select course_id, user_id, in_datetime dt, 1 uvfrom attend_tbunion allselect course_id, user_id, out_datetime dt, -1 uvfrom attend_tb)t1 这样可以计算到每个进入或出去的记录的值，方便后面进行计算 2、使用窗口函数进行计算 关于窗口函数，不熟悉的可以前去这个知乎er解析里面看，讲解的十分清晰。 通俗易懂的学会：SQL窗口函数 - 知乎 (zhihu.com) 1sum(uv) over(partition by course_id order by dt,uv desc) uv_cnt 关键点：按照日期排序，就可以得到每个时间瞬时进入或出去的人数，使用sum(uv)则可以计算瞬时值，因为需要计算每个课程的瞬时值，所以需要按照课程的id进行分组，这个分组的好处是，不是聚合分组，不会减少行的数量。 3、 最后计算最大值即可 贴上完整sql代码 1234567891011121314151617181920212223242526272829select course_id,course_name,max(uv_cnt) max_numfrom (select a.course_id,course_name,sum(uv) over(partition by course_id order by dt,uv desc) uv_cntfrom (select course_id, user_id, in_datetime dt, 1 uvfrom attend_tbunion allselect course_id, user_id, out_datetime dt, -1 uvfrom attend_tb)t1 join course_tb a on t1.course_id=a.course_id)t2group by course_id,course_name order by course_id","categories":[],"tags":[{"name":"MySql","slug":"MySql","permalink":"http://example.com/tags/MySql/"}]},{"title":"Vue.js入门到入土","slug":"Vue-js入门到入土","date":"2022-10-03T06:49:37.000Z","updated":"2022-10-07T14:24:54.883Z","comments":true,"path":"2022/10/03/Vue-js入门到入土/","link":"","permalink":"http://example.com/2022/10/03/Vue-js%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/","excerpt":"Vue学习之旅","text":"Vue学习之旅 webpack 前端模块化，解决js兼容问题，项目打包等都需要webpack使用node创建前端工程 -D参数 在开发阶段使用的包 -S参数 在开发上线都需要的包 webpack配置文件编写： 123module.exports=&#123; //开发环境 development | production mode:&#x27;development&#x27;&#125; 在package.json文件的scripts脚本加入(可以使用npm运行的脚本) &quot;dev&quot; :&quot;webpack&quot; npm run dev 后会发现一个dist文件夹，引入dist&#x2F;main.js文件，即可 两种模式的区别 12development 开发环境使用，打包速度快production 上线的时候用，打包慢，但是压缩的文件更小 默认约定和改变 打包目录：.&#x2F;src&#x2F;index.js 输出路径 .&#x2F;dist&#x2F;main.js 123//指定处理的文件 entry: path.join(__dirname,&#x27;./src/index.js&#x27;),output:&#123; path:, filename: &#125; 安装配置webpack插件 npm install &#x77;&#x65;&#98;&#x70;&#x61;&#x63;&#107;&#45;&#100;&#101;&#x76;&#45;&#x73;&#x65;&#114;&#x76;&#x65;&#114;&#64;&#51;&#x2e;&#x31;&#x31;&#x2e;&#x32; -D 更改配置文件“scripts” :”dev serve “ 重新run发现报错更改webpack-cli版本为4.10.0 安装了webpack-dev-server后，生成的js文件是在内存中的，需要手动引入 html-webpack-plugin 配置完成不用手动进入src的index页面，打开8080就是首页 12345678//导入HTML插件 const HtmlPlugin=require(&#x27;html-webpack-plugin&#x27;);const htmlPlugin=new HtmlPlugin(&#123; template:&#x27;./src/index.html&#x27;, //指定原文件存放路径 filename:&#x27;./index.html&#x27; //指定生成文件的存放路径 &#125;) module.exports=&#123; mode:&#x27;development&#x27;, plugins :[htmlPlugin] //通过节点使插件生效 &#125; 引入这个插件不需要再手动引入打包过的js文件 devServer节点 设置默认打开浏览器 123456`devServer:&#123; open:true, //是否打开浏览器 host:&#x27;127.0.0.1&#x27;, //主机地址 port: 80 //端口号 &#125;` loader 加载css等文件注意： 如果报错loader找不到先安装 1npm install style-loader css-loader 配置文件 12345678module:&#123; rules:[ &#123;test:/\\.css$/,use:[&#123; loader: &#x27;style-loader&#x27; &#125;, &#123; loader: &#x27;css-loader&#x27; &#125;]&#125;， ] &#125; 打包处理less文件 安装loadernpm i &#108;&#101;&#x73;&#x73;&#x2d;&#108;&#x6f;&#x61;&#100;&#101;&#114;&#64;&#x31;&#x30;&#x2e;&#48;&#46;&#49; &#108;&#101;&#x73;&#115;&#x40;&#x34;&#x2e;&#x31;&#x2e;&#x31; -D 更改配置文件 图片loader加载需要安装url-loader file-loader 1234npm i url-loader@4.1.1 file-loader@6.2.0 -D配置文件&#123;test:/\\.gif|jpg|png$/,user:[&#123;loader:&#x27;url-loader|limit=22229&#x27;&#125;]&#125; 配置build命令 1&quot;build&quot; &quot;webpack --mode production&quot; sourceMap 记录源代码代码的位置信息，以及打包的代码的位置信息更改配置文件中devtool的值即可在调试中输出准确的代码位置 Vue 特点 双向绑定：不操作DOM的前提下，自动把用户填写的数据同步到数据源 数据驱动视图：页面监听数据，数据发生改变重新渲染页面 MVVM架构 Model：数据源 View：当前页面所渲染的DOM结构 ViewModel ：vue实例 使用步骤 1、导入vue.js脚本文件 12345678910111213141516171819```&lt;script src=&quot; https://cdn.staticfile.org/vue/2.6.12/vue.min.js&quot;&gt;&lt;/script&gt;`页面中声明一个被vue控制的DOM区域`&lt;div id=&quot;app&quot;&gt;&#123;&#123; message &#125;&#125;`创建vm实例对象``` vueconst vm=new Vue(&#123; el:&#x27;#app&#x27;, //控制区域 data:&#123; //数据源 message:&#x27;李四&#x27;, list:[&#x27;1&#x27;,&#x27;2&#x27;], &#125; &#125;); 内容渲染指令 v-text 渲染值到标签中，但是会覆盖原有内容 插值表达式 作用同上，但是不会覆盖原来的内容 v-html 渲染文本和HTML标签 属性绑定指令 123456注意：插值表达式不能用在属性节点中，只能用在内容节点&lt;input type=&quot;text&quot; v-bind:placeholder=&quot;tips&quot;&gt;使用v-bind可以动态绑定属性，给那个属性绑定，就在哪个属性前面加上v-bind:，可以简写为：，例如:src插值表达式和v-bind可以进行简单运算&lt;div&gt;&#123;&#123;msg.split(&#x27;&#x27;).reverse()&#125;&#125;&lt;/div&gt; 事件绑定 vue提供了v-on指令进行事件绑定 1&lt;button v-on:click=&quot;add&quot;&gt;+1&lt;/button&gt; //:后面声明事件的类型 并且vue提供methods对象允许我们定义js方法 1234567891011 methods:&#123; add:function()&#123; console.log(&#x27;ok&#x27;); this.count++; &#125; &#125;//简写add()&#123; this.count++; &#125; 通过this访问数据源中的对象 因为this指向的是Vue对象，可以使用this代替vue实例访问数据源中的值 简写以及传参 1&lt;button @click=&quot;add(1)&quot;&gt;+1&lt;/button&gt; $event事件绑定 1234567//事件没有传递参数，则会有一个默认事件对象 add(e)&#123; this.count++; console.log(e); console.log(e.target); &#125;======控制台打印如下结果 但是如果方法传递了参数，就会覆盖这个事件对象可以通过vue内置对象，$event传入事件对象 事件修饰符 原生js中，我们可以通过事件的方法阻止事件默认行为和事件冒泡。在vue中提供的更加方便的实现:事件修饰符 12@click.prevent //.prevent就可以阻止默认行为 按键修饰符 12&lt;input type=&quot;text&quot; @keyup.enter=&quot;append&quot; placeholder=&quot;请输入&quot;&gt; 双向绑定 双向数据绑定，vue提供v-model进行数据绑定，通过这个指令，用户在视图上面对数据的修改，可以被数据源感知到并更新，从而不用操作DOM。 v-bind:单向数据绑定，数据源改变会导致页面数据改变，但是反过来却不会 表单元素才能使用v-model指令，例如input,select,textareav-model修饰符 v-model会自动判断需要双向绑定的值，radio绑定的是checked属性，text则绑定value属性 条件渲染 vue提供条件渲染v-if和v-show进行动态控制组件的展示 v-if 动态移除元素或者创建元素 v-show 添加和移除display:none元素 v-else搭配v-if使用 列表渲染 vue提供v-for进行对列表的渲染，渲染到哪个元素给那个元素添加v-for格式形如 1&lt;tr v-for=&quot;index in list&quot;&gt; 另外，v-for提供了一个可选参数，返回当前的索引 123456&lt;tr v-for=&quot;(item,index) in list&quot;&gt;&lt;td&gt;&#123;&#123;index&#125;&#125;&lt;/td&gt;&lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;&lt;td&gt;&#123;&#123;item.age&#125;&#125;&lt;/td&gt;&lt;td&gt;&#123;&#123;item.sex&#125;&#125;&lt;/td&gt;&lt;/tr&gt; 官方推荐使用v-for绑定一个key值，为每个对象的item值 1&lt;tr v-for=&quot;(item,index) in list&quot; :key=&quot;item.id&quot;&gt; 复习js删除 filter函数接受一个回调函数，返回的是过滤的条件 1this.list=this.list.filter(item =&gt; return item.id !== id) 过滤器 只能在vue2.0中使用，常用于文本格式化 12345filters:&#123; format(val)&#123; return new Date(val); &#125;&#125; 调用 1&#123;&#123;val | format(val)&#125;&#125; 全局过滤器 123Vue.filter(&#x27;过滤器名&#x27;, ()=&gt;&#123; 回调函数&#125;) 使用过滤器全局格式化日期 可以使用dayjs插件快速格式化时间 注意这个过滤器要放在vue实例之前，否则不会生效 123456789//定义全局过滤器，格式化时间 Vue.filter(&#x27;dateformat&#x27;,(time)=&gt;&#123; //yyyy-MM-dd的日期格式 //使用dayjs格式化时间 const dstr= dayjs(time).format(&#x27;YYYY-MM-DD&#x27;); console.log(dstr); return dstr; &#125;); 侦听器 监听数据的变化 123456watch:&#123; //监视谁，就把谁作为侦听器名字 username(newVal,oldVal)&#123; &#125;&#125; 对象形式的监听器 1234567891011watch:&#123; username:&#123; handler(newVal,oldVal)&#123; &#125;, //是否立即触发 immediate:true， //深度监听 deep:true &#125;&#125; 计算属性 12345computed:&#123; rgba()&#123; &#125;&#125; axios 用于发送网络请求 123456789axios(&#123; method:&#x27;&#x27;, url:&#x27;&#x27;， //get参数 ？username=&#x27;&#x27; params:&#123; &#125;, //请求体参数， data:&#123;&#125;,&#125;).then((response)=&gt;&#123;&#125;) //返回的是一个promise对象，可以调用then继续操作 response 对象中的data属性才是服务端返回的值方法返回promise,可以使用await修饰， 但是方法需要是async,async方法返回的是一个promise对象 123456789const data= await axios(&#123; method:&#x27;get&#x27;, //get参数 ？username=&#x27;&#x27; params:&#123; &#125;, //请求体参数 data:&#123;&#125;, url:&#x27;https://www.escook.cn/api/finduser/&#x27;+&#x27;admin&#x27; &#125;) get 1234567891011axios.get(&#x27;url&#x27;,&#123; params:&#123;&#125;,&#125;)//具体事例 //axios get 和post axios.get(&#x27;https://api.uomg.com/api/rand.qinghua&#x27;,&#123; params:&#123;format:&#x27;json&#x27;&#125; &#125;).then((res)=&gt;&#123; console.log(res.data); &#125;) post 123456axios.post(&#x27;url&#x27;,&#123; username:&#x27;&#x27;, age:&#x27;&#x27;&#125;).then(()=&gt;&#123; &#125;) 挂载axios到Vue实例上 在main.js中通过原型挂载 123//引入axiosimport axios from &#x27;axios&#x27;Vue.prototype.$axios=axios 调用 1this.$axios.post() 利用Cli安装Vue项目 12npm i @vue/cli -gvue create 项目名 自定义安装，选择最后一项 选择2.0版本的vue(主流) 选择less进行样式预处理 配置文件的创建，选择第一项创建项目，如果项目创建慢，设置为淘宝镜像 npm run serve 启动项目 空格是选择安装的插件，回车则是确定选择项 项目构成 assets:存放静态资源，图片，css等内容 components:存放可以重用的组件 App.vue项目的跟组件 main.js程序入口文件 123456import App from &#x27;./App.vue&#x27;new Vue(&#123; render: h =&gt; h(App), //安装的插件可以在这里使用&#125;).$mount(&#x27;#app&#x27;)//这段代码表示，将App里面的内容渲染到index.html中 组件的data不能使用以前的对象写法，而是应该是一个函数，如下 12345data()&#123; return &#123; &#125;&#125; 组件方法 12345methods:&#123; change()&#123; this.msg=&#x27;芝士土拨鼠&#x27; &#125; &#125; 启用less h1{ background-color: pink; color: red; } 组件使用 使用import导入 12//@指的是src目录import Login from &#x27;@/components/Login.vue&#x27; 使用components节点注册 123components:&#123; Login&#125; 以标签形式使用 1&lt;Login&gt;&lt;/Login&gt; 全局注册组件 在main.js下面使用Vue.component(‘注册名称’,’组件名称’) 12import Right from &#x27;./components/Right.vue&#x27;Vue.component(&#x27;MyRight&#x27;,Right) 组件之间的数据共享 props 父组件向子组件传值 123456//子组件定义propsprops:[&#x27;message&#x27;]在子组件中使用propsthis.message//父组件通过标签传值&lt;Son :message=&quot;哈哈哈&quot;&gt;&lt;/Son&gt; 默认值（使用默认值定义props） 12345678910111213141516171819202122props:&#123; message:&#123; default:&#x27;hhh&#x27; &#125; &#125;, //type 值类型props:&#123; message:&#123; default:&#x27;hhh&#x27;,//Number，Boolean，String Object， Array等类型 type:String &#125; &#125;,//require必选 props:&#123; message:&#123; default:&#x27;hhh&#x27;, type:String, require:false &#125; &#125;, 子传父 需要在子组件中定义事件 123getName()&#123; this.$emit(&#x27;numChange&#x27;,&#x27;传递的值&#x27;)&#125; 父组件中 调用numChange方法 12345&lt;NewSon @numChange=&quot;getNewName&quot;&gt;&lt;/NewSon&gt;//将子组件传递过来的值接受并转存 getNewName(val)&#123; this.name=val &#125; 兄弟传值 样式冲突 给属性添加scoped属性，默认会给组件的所有标签添加一个自定义属性，不会影响到其他组件的样式 ![](F:\\Blog\\source\\imgs\\smzqi.png) beforeCreate:props，data，method还没创建，不能被使用 create：组件刚刚创建，props，data，method创建了，能被使用，模板尚未创建（dom结构尚未创建），常用发送请求 beforeMount： mounted：渲染DOM结构 beforeUpdate：数据发生变化时触发，但是不会改变DOM updated：已经是最新的数据和UI destroy：销毁阶段 DOM元素引用 this.$ref.xxx 12345&lt;h1 ref=&quot;myh1&quot;&gt;这是子组件&lt;/h1&gt;change()&#123; this.$refs.myh1.style.color=&#x27;red&#x27; &#125; #### this.$nextTick(callback) 延迟函数到下一次DOM结构更新再回调 12345//获取文本焦点 this.$nextTick(()=&gt;&#123; this.$refs.inpRef.focus() &#125;) 为什么不写在update中？因为每次数据更新都会触发update函数， 然而这里数据会更新两次，第二次更新 #### js处理数组的方法 forEach()遍历整个数组，不会停下 1234arr.forEach((item,index)=&gt;&#123; console.log(item); console.log(index); &#125;) some()遍历，不会遍历到低 123456arr.some((item)=&gt;&#123; console.log(item); if(item == &#x27;arr2&#x27;)&#123; return true; &#125; &#125;) every()判断每一项 12let flag= arr.every(item=&gt;item.state)console.log(flag); reduce累加方法，接受一个累加器和一个初始值，不断累加 1arr.reduce((item,total)=&gt;return total+=item.price,0) #### 动态组件 1&lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt; 动态获取comName,通过这种方式可以实现动态切换组件动态切换组件会销毁实例，可以使用keep-alive保持组件的存活 123&lt;keep-alive&gt; &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;&lt;/keep-alive&gt; 这个组件会触发两个生命周期函数 deactivated:组件缓存 activated：激活时触发 指定组件缓存 ： include，多组件之间使用,分隔开 exclude=\"\"不缓存那些组件，不能同时使用 123&lt;keep-alive include=&quot;Son,Test&quot;&gt; &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;&lt;/keep-alive&gt; #### 插槽 允许把用户不确定的内容定义为插槽，动态指定标签平时在自定义组件的html标签会被忽略，但是可以通过插槽的方式实现渲染 每个slot插槽建议定义一个名称 1&lt;slot :name=&quot;&quot;&gt;&lt;/slot&gt; 将内容填充到具体插槽中 123&lt;template v-slot:father&gt; &lt;p&gt;这是father组件的插槽&lt;/p&gt;&lt;/template&gt; v-slot简写 #，只能用在组件或者template组件上，如果不用这个属性，不需要template包裹 作用域插槽 在封装组件时，为预留的slot提供属性的插槽，就称为作用域插槽 12345678&lt;Father&gt; &lt;template #father=&quot;obj&quot;&gt; &lt;p&gt;这是father组件的插槽&lt;/p&gt; &#123;&#123; obj.msg&#125;&#125; &lt;/template&gt;&lt;/Father&gt;//插槽&lt;slot name=&quot;father&quot; msg=&quot;这是msg&quot;&gt;&lt;/slot&gt; #### 自定义指令 12345678910directives:&#123; //指令名称 color:&#123; //指令执行的函数 //binding对象有个value属性，就是指令上面传递的参数 color(el,binding)&#123; el.style.color=binding.value &#125; &#125;&#125; #### 全局自定义指令 12//使用全局自定义指令 Vue.directive(&#x27;color&#x27;,(el,binding)=&gt;&#123; el.style.color=binding.value &#125;) #### 路由 在地址中，#后面的属于hash地址。 路由就是hash地址和不同组件之间的对应关系。 **路由配置:** 编写配置文件，并导出实例 1234567891011import Vue from &#x27;vue&#x27;;import vueRouter from &#x27;vue-router&#x27;//使用路由Vue.use(vueRouter);//创建实例const router =new vueRouter();//向外共享一个router实例export default router **在main.js中使用** 123456import router from &#x27;@/router/index.js&#x27;new Vue(&#123; render: h =&gt; h(App), router&#125;).$mount(&#x27;#app&#x27;) **router-view组件** 起到占位符的作用，点击链接，链接内容展示在这个占位符里面，路由对应关系的编写， 编写路由与组件的对应关系 1234567891011121314//先导入组件，再使用//创建实例const router =new vueRouter(&#123; routes:[ &#123; path:&#x27;/right&#x27;, component:Right, &#125;, &#123; path:&#x27;/son&#x27;, component:Son, &#125; ]&#125;); 使用router-link代替a链接，可以不再使用#标识hash值 1&lt;router-link to=&quot;/right&quot;&gt;右组件&lt;/router-link&gt; 路由重定向(强制跳转) 12345&#123; path:&#x27;/&#x27;, redirect:&#x27;/login&#x27; &#125;, **嵌套路由** 1234567&#123; path:&#x27;/son&#x27;, component:Son, children:[ &#123;path:&#x27;/newson&#x27;, component:newSon&#125; ]&#125;, children里面那个子路由的path属性为空，则为默认子路由 **动态路由匹配** 123456//动态路由 &#123; //id值可以动态匹配到不同页面 path:&#x27;/movie/:id&#x27;, component:movie, &#125;, route对象 ![](F:\\Blog\\source\\imgs\\route.png) 发现传递的id值可以通过this.$route.params.id获取，query是路由中的?参数 #### 导航 声明式导航：通过标签实现跳转的 编程式导航：通过js代码实现跳转的 认识router对象，router是一个导航对象，提供一系列导航方法 this.$router.push()跳转到指定路径，并添加一条历史记录（history） this.$router.replace()跳转到指定路径，替换到当前地址 this.$router.go(数值n)在浏览历史中中前进或者后退，可以使用简化的方法forward和back方法 **导航守卫** ![](F:\\Blog\\source\\imgs\\router.png) 123456789101112//全局前置路由守卫//只要出现路由跳转，就会触发这个路由守卫的回调函数router.beforeEach((to,from,next)=&gt;&#123;//to:将要访问的路由//from: 即将离开的路由//next() 表示放行// console.log(from);// console.log(to);//next()函数的三种形式，next()放行，// next(false)强制停留在当前页面，next(&#x27;/login&#x27;)跳转到指定页面 next();&#125;) **模拟登录场景** 123456789101112131415161718//模拟登录场景//判断是否为login页，放行//首页需要登录//to from 都是一个route对象，里面的path值才是路由hash值 if(to.path === &#x27;/login&#x27;)&#123; next(); &#125; else&#123; //判断是否已经登录（token） //没有登录重定向到login页 //已经登录则放行 const token = localStorage.getItem(&#x27;token&#x27;); if(token)&#123; next(); &#125;else&#123; next(&#x27;/login&#x27;); &#125; &#125; **控制页面访问权限** 编写一个js文件保存需要控制的数组 导入数组判断是否在数组里面 js文件 12345export default [&#x27;/main&#x27;,&#x27;/movie&#x27;] //判断 if(pathArr.indexOf(to.path) === -1)&#123; next();&#125;` **路由控制进阶方案**（使用addRoute动态） [vue如何实现路由权限控制 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/55262808)动态创建路由","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"标签","slug":"tags","date":"2022-10-03T03:30:41.000Z","updated":"2022-10-03T04:15:18.977Z","comments":true,"path":"2022/10/03/tags/","link":"","permalink":"http://example.com/2022/10/03/tags/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-10-02T17:19:50.645Z","updated":"2022-10-03T07:07:31.039Z","comments":true,"path":"2022/10/03/hello-world/","link":"","permalink":"http://example.com/2022/10/03/hello-world/","excerpt":"Welcome to Hexo!","text":"Welcome to Hexo! Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"MySql","slug":"MySql","permalink":"http://example.com/tags/MySql/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"}]}