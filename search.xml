<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>函数式编程</title>
      <link href="/2022/10/10/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/10/10/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>吊炸天的函数式编程，你学会了吗</p><span id="more"></span>        <h1 id="函数式编程-Stream流"   >          <a href="#函数式编程-Stream流" class="heading-link"><i class="fas fa-link"></i></a><a href="#函数式编程-Stream流" class="headerlink" title="函数式编程-Stream流"></a>函数式编程-Stream流</h1>              <h2 id="1-概述"   >          <a href="#1-概述" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2>              <h3 id="1-1-为什么学？"   >          <a href="#1-1-为什么学？" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-1-为什么学？" class="headerlink" title="1.1 为什么学？"></a>1.1 为什么学？</h3>      <ul><li>能够看懂公司里的代码</li><li>大数量下处理集合效率高</li><li>代码可读性高</li><li>消灭嵌套地狱</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询未成年作家的评分在70以上的书籍 由于洋流影响所以作家和书籍可能出现重复，需要进行去重</span></span><br><span class="line">List&lt;Book&gt; bookList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Set&lt;Book&gt; uniqueBookValues = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">Set&lt;Author&gt; uniqueAuthorValues = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Author author : authors) &#123;</span><br><span class="line">    <span class="keyword">if</span> (uniqueAuthorValues.add(author)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (author.getAge() &lt; <span class="number">18</span>) &#123;</span><br><span class="line">            List&lt;Book&gt; books = author.getBooks();</span><br><span class="line">            <span class="keyword">for</span> (Book book : books) &#123;</span><br><span class="line">                <span class="keyword">if</span> (book.getScore() &gt; <span class="number">70</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (uniqueBookValues.add(book)) &#123;</span><br><span class="line">                        bookList.add(book);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(bookList);</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Book&gt; collect = authors.stream()</span><br><span class="line">    .distinct()</span><br><span class="line">    .filter(author -&gt; author.getAge() &lt; <span class="number">18</span>)</span><br><span class="line">    .map(author -&gt; author.getBooks())</span><br><span class="line">    .flatMap(Collection::stream)</span><br><span class="line">    .filter(book -&gt; book.getScore() &gt; <span class="number">70</span>)</span><br><span class="line">    .distinct()</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line">System.out.println(collect);</span><br></pre></td></tr></table></div></figure>        <h3 id="1-2-函数式编程思想"   >          <a href="#1-2-函数式编程思想" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-2-函数式编程思想" class="headerlink" title="1.2 函数式编程思想"></a>1.2 函数式编程思想</h3>              <h4 id="1-2-1-概念"   >          <a href="#1-2-1-概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-2-1-概念" class="headerlink" title="1.2.1 概念"></a>1.2.1 概念</h4>      <p>​面向对象思想需要关注用什么对象完成什么事情。而函数式编程思想就类似于我们数学中的函数。它主要关注的是对数据进行了什么操作。</p>        <h4 id="1-2-2-优点"   >          <a href="#1-2-2-优点" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-2-2-优点" class="headerlink" title="1.2.2 优点"></a>1.2.2 优点</h4>      <ul><li>代码简洁，开发快速</li><li>接近自然语言，易于理解</li><li>易于”并发编程”</li></ul>        <h2 id="2-Lambda表达式"   >          <a href="#2-Lambda表达式" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-Lambda表达式" class="headerlink" title="2. Lambda表达式"></a>2. Lambda表达式</h2>              <h3 id="2-1-概述"   >          <a href="#2-1-概述" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3>      <p>​Lambda是JDK8中一个语法糖。他可以对某些匿名内部类的写法进行简化。它是函数式编程思想的一个重要体现。让我们不用关注是什么对象。而是更关注我们对数据进行了什么操作。</p>        <h3 id="2-2-核心原则"   >          <a href="#2-2-核心原则" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-2-核心原则" class="headerlink" title="2.2 核心原则"></a>2.2 核心原则</h3>      <blockquote><p>可推导可省略</p></blockquote>        <h3 id="2-3-基本格式"   >          <a href="#2-3-基本格式" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-3-基本格式" class="headerlink" title="2. 3 基本格式"></a>2. 3 基本格式</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(参数列表)-&gt;&#123;代码&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="例一"   >          <a href="#例一" class="heading-link"><i class="fas fa-link"></i></a><a href="#例一" class="headerlink" title="例一"></a>例一</h4>      <p>我们在创建线程并启动时可以使用匿名内部类的写法：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你知道吗 我比你想象的 更想在你身边&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></div></figure><p>可以使用Lambda的格式对其进行修改。修改后如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;你知道吗 我比你想象的 更想在你身边&quot;</span>);</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></div></figure>        <h4 id="例二"   >          <a href="#例二" class="heading-link"><i class="fas fa-link"></i></a><a href="#例二" class="headerlink" title="例二:"></a>例二:</h4>      <p>现有方法定义如下，其中IntBinaryOperator是一个接口。先使用匿名内部类的写法调用该方法。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateNum</span><span class="params">(IntBinaryOperator operator)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">return</span> operator.applyAsInt(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> calculateNum(<span class="keyword">new</span> <span class="title class_">IntBinaryOperator</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">applyAsInt</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> left + right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>Lambda写法：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> calculateNum((<span class="type">int</span> left, <span class="type">int</span> right)-&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> left + right;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="例三："   >          <a href="#例三：" class="heading-link"><i class="fas fa-link"></i></a><a href="#例三：" class="headerlink" title="例三："></a>例三：</h4>      <p>现有方法定义如下，其中IntPredicate是一个接口。先使用匿名内部类的写法调用该方法。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printNum</span><span class="params">(IntPredicate predicate)</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">        <span class="keyword">if</span>(predicate.test(i))&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    printNum(<span class="keyword">new</span> <span class="title class_">IntPredicate</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> value%<span class="number">2</span>==<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>Lambda写法：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    printNum((<span class="type">int</span> value)-&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> value%<span class="number">2</span>==<span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printNum</span><span class="params">(IntPredicate predicate)</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">        <span class="keyword">if</span>(predicate.test(i))&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="例四："   >          <a href="#例四：" class="heading-link"><i class="fas fa-link"></i></a><a href="#例四：" class="headerlink" title="例四："></a>例四：</h4>      <p>现有方法定义如下，其中Function是一个接口。先使用匿名内部类的写法调用该方法。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;R&gt; R <span class="title function_">typeConver</span><span class="params">(Function&lt;String,R&gt; function)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;1235&quot;</span>;</span><br><span class="line">    <span class="type">R</span> <span class="variable">result</span> <span class="operator">=</span> function.apply(str);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> typeConver(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;String, Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">apply</span><span class="params">(String s)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.valueOf(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>Lambda写法：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> typeConver((String s)-&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.valueOf(s);</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="例五："   >          <a href="#例五：" class="heading-link"><i class="fas fa-link"></i></a><a href="#例五：" class="headerlink" title="例五："></a>例五：</h4>      <p>现有方法定义如下，其中IntConsumer是一个接口。先使用匿名内部类的写法调用该方法。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">foreachArr</span><span class="params">(IntConsumer consumer)</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">        consumer.accept(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    foreachArr(<span class="keyword">new</span> <span class="title class_">IntConsumer</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>Lambda写法：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    foreachArr((<span class="type">int</span> value)-&gt;&#123;</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="2-4-省略规则"   >          <a href="#2-4-省略规则" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-4-省略规则" class="headerlink" title="2.4 省略规则"></a>2.4 省略规则</h3>      <ul><li>参数类型可以省略</li><li>方法体只有一句代码时大括号return和唯一一句代码的分号可以省略</li><li>方法只有一个参数时小括号可以省略</li><li>以上这些规则都记不住也可以省略不记</li></ul>        <h2 id="3-Stream流"   >          <a href="#3-Stream流" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-Stream流" class="headerlink" title="3. Stream流"></a>3. Stream流</h2>              <h3 id="3-1-概述"   >          <a href="#3-1-概述" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3>      <p>​Java8的Stream使用的是函数式编程模式，如同它的名字一样，它可以被用来对集合或数组进行链状流式的操作。可以更方便的让我们对集合或数组操作。</p>        <h3 id="3-2-案例数据准备"   >          <a href="#3-2-案例数据准备" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-2-案例数据准备" class="headerlink" title="3.2 案例数据准备"></a>3.2 案例数据准备</h3>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span><span class="comment">//用于后期的去重使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Author</span> &#123;</span><br><span class="line">    <span class="comment">//id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//简介</span></span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line">    <span class="comment">//作品</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Book&gt; books;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span><span class="comment">//用于后期的去重使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="comment">//id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//书名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分类</span></span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//评分</span></span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//简介</span></span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Author&gt; <span class="title function_">getAuthors</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//数据初始化</span></span><br><span class="line">    <span class="type">Author</span> <span class="variable">author</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Author</span>(<span class="number">1L</span>,<span class="string">&quot;蒙多&quot;</span>,<span class="number">33</span>,<span class="string">&quot;一个从菜刀中明悟哲理的祖安人&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    <span class="type">Author</span> <span class="variable">author2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Author</span>(<span class="number">2L</span>,<span class="string">&quot;亚拉索&quot;</span>,<span class="number">15</span>,<span class="string">&quot;狂风也追逐不上他的思考速度&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    <span class="type">Author</span> <span class="variable">author3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Author</span>(<span class="number">3L</span>,<span class="string">&quot;易&quot;</span>,<span class="number">14</span>,<span class="string">&quot;是这个世界在限制他的思维&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    <span class="type">Author</span> <span class="variable">author4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Author</span>(<span class="number">3L</span>,<span class="string">&quot;易&quot;</span>,<span class="number">14</span>,<span class="string">&quot;是这个世界在限制他的思维&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//书籍列表</span></span><br><span class="line">    List&lt;Book&gt; books1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Book&gt; books2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Book&gt; books3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    books1.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">1L</span>,<span class="string">&quot;刀的两侧是光明与黑暗&quot;</span>,<span class="string">&quot;哲学,爱情&quot;</span>,<span class="number">88</span>,<span class="string">&quot;用一把刀划分了爱恨&quot;</span>));</span><br><span class="line">    books1.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">2L</span>,<span class="string">&quot;一个人不能死在同一把刀下&quot;</span>,<span class="string">&quot;个人成长,爱情&quot;</span>,<span class="number">99</span>,<span class="string">&quot;讲述如何从失败中明悟真理&quot;</span>));</span><br><span class="line"></span><br><span class="line">    books2.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">3L</span>,<span class="string">&quot;那风吹不到的地方&quot;</span>,<span class="string">&quot;哲学&quot;</span>,<span class="number">85</span>,<span class="string">&quot;带你用思维去领略世界的尽头&quot;</span>));</span><br><span class="line">    books2.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">3L</span>,<span class="string">&quot;那风吹不到的地方&quot;</span>,<span class="string">&quot;哲学&quot;</span>,<span class="number">85</span>,<span class="string">&quot;带你用思维去领略世界的尽头&quot;</span>));</span><br><span class="line">    books2.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">4L</span>,<span class="string">&quot;吹或不吹&quot;</span>,<span class="string">&quot;爱情,个人传记&quot;</span>,<span class="number">56</span>,<span class="string">&quot;一个哲学家的恋爱观注定很难把他所在的时代理解&quot;</span>));</span><br><span class="line"></span><br><span class="line">    books3.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">5L</span>,<span class="string">&quot;你的剑就是我的剑&quot;</span>,<span class="string">&quot;爱情&quot;</span>,<span class="number">56</span>,<span class="string">&quot;无法想象一个武者能对他的伴侣这么的宽容&quot;</span>));</span><br><span class="line">    books3.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">6L</span>,<span class="string">&quot;风与剑&quot;</span>,<span class="string">&quot;个人传记&quot;</span>,<span class="number">100</span>,<span class="string">&quot;两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？&quot;</span>));</span><br><span class="line">    books3.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">6L</span>,<span class="string">&quot;风与剑&quot;</span>,<span class="string">&quot;个人传记&quot;</span>,<span class="number">100</span>,<span class="string">&quot;两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？&quot;</span>));</span><br><span class="line"></span><br><span class="line">    author.setBooks(books1);</span><br><span class="line">    author2.setBooks(books2);</span><br><span class="line">    author3.setBooks(books3);</span><br><span class="line">    author4.setBooks(books3);</span><br><span class="line"></span><br><span class="line">    List&lt;Author&gt; authorList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(author,author2,author3,author4));</span><br><span class="line">    <span class="keyword">return</span> authorList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="3-3-快速入门"   >          <a href="#3-3-快速入门" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-3-快速入门" class="headerlink" title="3.3 快速入门"></a>3.3 快速入门</h3>              <h4 id="3-3-1-需求"   >          <a href="#3-3-1-需求" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-3-1-需求" class="headerlink" title="3.3.1 需求"></a>3.3.1 需求</h4>      <p>​我们可以调用getAuthors方法获取到作家的集合。现在需要打印所有年龄小于18的作家的名字，并且要注意去重。</p>        <h4 id="3-3-2-实现"   >          <a href="#3-3-2-实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-3-2-实现" class="headerlink" title="3.3.2 实现"></a>3.3.2 实现</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印所有年龄小于18的作家的名字，并且要注意去重</span></span><br><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">authors.</span><br><span class="line">        stream()<span class="comment">//把集合转换成流</span></span><br><span class="line">        .distinct()<span class="comment">//先去除重复的作家</span></span><br><span class="line">        .filter(author -&gt; author.getAge()&lt;<span class="number">18</span>)<span class="comment">//筛选年龄小于18的</span></span><br><span class="line">        .forEach(author -&gt; System.out.println(author.getName()));<span class="comment">//遍历打印名字</span></span><br></pre></td></tr></table></div></figure>        <h3 id="3-4-常用操作"   >          <a href="#3-4-常用操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-4-常用操作" class="headerlink" title="3.4 常用操作"></a>3.4 常用操作</h3>              <h4 id="3-4-1-创建流"   >          <a href="#3-4-1-创建流" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-4-1-创建流" class="headerlink" title="3.4.1 创建流"></a>3.4.1 创建流</h4>      <p>单列集合： <code>集合对象.stream()</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">      List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">Stream&lt;Author&gt; stream = authors.stream();</span><br></pre></td></tr></table></div></figure><p>数组：<code>Arrays.stream(数组) </code>或者使用<code>Stream.of</code>来创建</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">Stream&lt;Integer&gt; stream = Arrays.stream(arr);</span><br><span class="line">Stream&lt;Integer&gt; stream2 = Stream.of(arr);</span><br></pre></td></tr></table></div></figure><p>双列集合：转换成单列集合后再创建</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;蜡笔小新&quot;</span>,<span class="number">19</span>);</span><br><span class="line">map.put(<span class="string">&quot;黑子&quot;</span>,<span class="number">17</span>);</span><br><span class="line">map.put(<span class="string">&quot;日向翔阳&quot;</span>,<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">Stream&lt;Map.Entry&lt;String, Integer&gt;&gt; stream = map.entrySet().stream();</span><br></pre></td></tr></table></div></figure>        <h4 id="3-4-2-中间操作"   >          <a href="#3-4-2-中间操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-4-2-中间操作" class="headerlink" title="3.4.2 中间操作"></a>3.4.2 中间操作</h4>              <h5 id="filter"   >          <a href="#filter" class="heading-link"><i class="fas fa-link"></i></a><a href="#filter" class="headerlink" title="filter"></a>filter</h5>      <p>​可以对流中的元素进行条件过滤，符合过滤条件的才能继续留在流中。</p><p>例如：</p><p>​打印所有姓名长度大于1的作家的姓名</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">authors.stream()</span><br><span class="line">        .filter(author -&gt; author.getName().length()&gt;<span class="number">1</span>)</span><br><span class="line">        .forEach(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></div></figure>        <h5 id="map"   >          <a href="#map" class="heading-link"><i class="fas fa-link"></i></a><a href="#map" class="headerlink" title="map"></a>map</h5>      <p>​可以把对流中的元素进行计算或转换。</p><p>例如：</p><p>​打印所有作家的姓名</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"></span><br><span class="line">authors</span><br><span class="line">        .stream()</span><br><span class="line">        .map(author -&gt; author.getName())</span><br><span class="line">        .forEach(name-&gt;System.out.println(name));</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        打印所有作家的姓名</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        authors.stream()</span></span><br><span class="line"><span class="comment">//                .map(author -&gt; author.getName())</span></span><br><span class="line"><span class="comment">//                .forEach(s -&gt; System.out.println(s));</span></span><br><span class="line"></span><br><span class="line">        authors.stream()</span><br><span class="line">                .map(author -&gt; author.getAge())</span><br><span class="line">                .map(age-&gt;age+<span class="number">10</span>)</span><br><span class="line">                .forEach(age-&gt; System.out.println(age));</span><br></pre></td></tr></table></div></figure>        <h5 id="distinct"   >          <a href="#distinct" class="heading-link"><i class="fas fa-link"></i></a><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h5>      <p>​可以去除流中的重复元素。</p><p>例如：</p><p>​打印所有作家的姓名，并且要求其中不能有重复元素。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">authors.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .forEach(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></div></figure><p><strong>注意：distinct方法是依赖Object的equals方法来判断是否是相同对象的。所以需要注意重写equals方法。</strong></p>        <h5 id="sorted"   >          <a href="#sorted" class="heading-link"><i class="fas fa-link"></i></a><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h5>      <p>​可以对流中的元素进行排序。</p><p>例如：</p><p>​对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"><span class="comment">//        对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素。</span></span><br><span class="line">        authors.stream()</span><br><span class="line">                .distinct()</span><br><span class="line">                .sorted()</span><br><span class="line">                .forEach(author -&gt; System.out.println(author.getAge()));</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"><span class="comment">//        对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素。</span></span><br><span class="line">        authors.stream()</span><br><span class="line">                .distinct()</span><br><span class="line">                .sorted((o1, o2) -&gt; o2.getAge()-o1.getAge())</span><br><span class="line">                .forEach(author -&gt; System.out.println(author.getAge()));</span><br></pre></td></tr></table></div></figure><p><strong>注意：如果调用空参的sorted()方法，需要流中的元素是实现了Comparable。</strong></p><p>​</p>        <h5 id="limit"   >          <a href="#limit" class="heading-link"><i class="fas fa-link"></i></a><a href="#limit" class="headerlink" title="limit"></a>limit</h5>      <p>​可以设置流的最大长度，超出的部分将被抛弃。</p><p>例如：</p><p>​对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素,然后打印其中年龄最大的两个作家的姓名。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">authors.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .sorted()</span><br><span class="line">        .limit(<span class="number">2</span>)</span><br><span class="line">        .forEach(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></div></figure>        <h5 id="skip"   >          <a href="#skip" class="heading-link"><i class="fas fa-link"></i></a><a href="#skip" class="headerlink" title="skip"></a>skip</h5>      <p>​跳过流中的前n个元素，返回剩下的元素</p><p>例如：</p><p>​打印除了年龄最大的作家外的其他作家，要求不能有重复元素，并且按照年龄降序排序。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        打印除了年龄最大的作家外的其他作家，要求不能有重复元素，并且按照年龄降序排序。</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        authors.stream()</span><br><span class="line">                .distinct()</span><br><span class="line">                .sorted()</span><br><span class="line">                .skip(<span class="number">1</span>)</span><br><span class="line">                .forEach(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></div></figure>        <h5 id="flatMap"   >          <a href="#flatMap" class="heading-link"><i class="fas fa-link"></i></a><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h5>      <p>​map只能把一个对象转换成另一个对象来作为流中的元素。而flatMap可以把一个对象转换成多个对象作为流中的元素。</p><p>例一：</p><p>​打印所有书籍的名字。要求对重复的元素进行去重。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        打印所有书籍的名字。要求对重复的元素进行去重。</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"></span><br><span class="line">        authors.stream()</span><br><span class="line">                .flatMap(author -&gt; author.getBooks().stream())</span><br><span class="line">                .distinct()</span><br><span class="line">                .forEach(book -&gt; System.out.println(book.getName()));</span><br></pre></td></tr></table></div></figure><p>例二：</p><p>​打印现有数据的所有分类。要求对分类进行去重。不能出现这种格式：哲学,爱情</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        打印现有数据的所有分类。要求对分类进行去重。不能出现这种格式：哲学,爱情     爱情</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        authors.stream()</span><br><span class="line">                .flatMap(author -&gt; author.getBooks().stream())</span><br><span class="line">                .distinct()</span><br><span class="line">                .flatMap(book -&gt; Arrays.stream(book.getCategory().split(<span class="string">&quot;,&quot;</span>)))</span><br><span class="line">                .distinct()</span><br><span class="line">                .forEach(category-&gt; System.out.println(category));</span><br></pre></td></tr></table></div></figure>        <h4 id="3-4-3-终结操作"   >          <a href="#3-4-3-终结操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-4-3-终结操作" class="headerlink" title="3.4.3 终结操作"></a>3.4.3 终结操作</h4>              <h5 id="forEach"   >          <a href="#forEach" class="heading-link"><i class="fas fa-link"></i></a><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h5>      <p>​对流中的元素进行遍历操作，我们通过传入的参数去指定对遍历到的元素进行什么具体操作。</p><p>例子：</p><p>​输出所有作家的名字</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        输出所有作家的名字</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"></span><br><span class="line">        authors.stream()</span><br><span class="line">                .map(author -&gt; author.getName())</span><br><span class="line">                .distinct()</span><br><span class="line">                .forEach(name-&gt; System.out.println(name));</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="count"   >          <a href="#count" class="heading-link"><i class="fas fa-link"></i></a><a href="#count" class="headerlink" title="count"></a>count</h5>      <p>​可以用来获取当前流中元素的个数。</p><p>例子：</p><p>​打印这些作家的所出书籍的数目，注意删除重复元素。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        打印这些作家的所出书籍的数目，注意删除重复元素。</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> authors.stream()</span><br><span class="line">                .flatMap(author -&gt; author.getBooks().stream())</span><br><span class="line">                .distinct()</span><br><span class="line">                .count();</span><br><span class="line">        System.out.println(count);</span><br></pre></td></tr></table></div></figure>        <h5 id="max-amp-min"   >          <a href="#max-amp-min" class="heading-link"><i class="fas fa-link"></i></a><a href="#max-amp-min" class="headerlink" title="max&amp;min"></a>max&amp;min</h5>      <p>​可以用来或者流中的最值。</p><p>例子：</p><p>​分别获取这些作家的所出书籍的最高分和最低分并打印。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        分别获取这些作家的所出书籍的最高分和最低分并打印。</span></span><br><span class="line">        <span class="comment">//Stream&lt;Author&gt;  -&gt; Stream&lt;Book&gt; -&gt;Stream&lt;Integer&gt;  -&gt;求值</span></span><br><span class="line"></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        Optional&lt;Integer&gt; max = authors.stream()</span><br><span class="line">                .flatMap(author -&gt; author.getBooks().stream())</span><br><span class="line">                .map(book -&gt; book.getScore())</span><br><span class="line">                .max((score1, score2) -&gt; score1 - score2);</span><br><span class="line"></span><br><span class="line">        Optional&lt;Integer&gt; min = authors.stream()</span><br><span class="line">                .flatMap(author -&gt; author.getBooks().stream())</span><br><span class="line">                .map(book -&gt; book.getScore())</span><br><span class="line">                .min((score1, score2) -&gt; score1 - score2);</span><br><span class="line">        System.out.println(max.get());</span><br><span class="line">        System.out.println(min.get());</span><br></pre></td></tr></table></div></figure>        <h5 id="collect"   >          <a href="#collect" class="heading-link"><i class="fas fa-link"></i></a><a href="#collect" class="headerlink" title="collect"></a>collect</h5>      <p>​把当前流转换成一个集合。</p><p>例子：</p><p>​获取一个存放所有作者名字的List集合。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        获取一个存放所有作者名字的List集合。</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        List&lt;String&gt; nameList = authors.stream()</span><br><span class="line">                .map(author -&gt; author.getName())</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(nameList);</span><br></pre></td></tr></table></div></figure><p>​获取一个所有书名的Set集合。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        获取一个所有书名的Set集合。</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        Set&lt;Book&gt; books = authors.stream()</span><br><span class="line">                .flatMap(author -&gt; author.getBooks().stream())</span><br><span class="line">                .collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">        System.out.println(books);</span><br></pre></td></tr></table></div></figure><p>​获取一个Map集合，map的key为作者名，value为List<Book></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        获取一个Map集合，map的key为作者名，value为List&lt;Book&gt;</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, List&lt;Book&gt;&gt; map = authors.stream()</span><br><span class="line">                .distinct()</span><br><span class="line">                .collect(Collectors.toMap(author -&gt; author.getName(), author -&gt; author.getBooks()));</span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br></pre></td></tr></table></div></figure>        <h5 id="查找与匹配"   >          <a href="#查找与匹配" class="heading-link"><i class="fas fa-link"></i></a><a href="#查找与匹配" class="headerlink" title="查找与匹配"></a>查找与匹配</h5>              <h6 id="anyMatch"   >          <a href="#anyMatch" class="heading-link"><i class="fas fa-link"></i></a><a href="#anyMatch" class="headerlink" title="anyMatch"></a>anyMatch</h6>      <p>​可以用来判断是否有任意符合匹配条件的元素，结果为boolean类型。</p><p>例子：</p><p>​判断是否有年龄在29以上的作家</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        判断是否有年龄在29以上的作家</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> authors.stream()</span><br><span class="line">                .anyMatch(author -&gt; author.getAge() &gt; <span class="number">29</span>);</span><br><span class="line">        System.out.println(flag);</span><br></pre></td></tr></table></div></figure>        <h6 id="allMatch"   >          <a href="#allMatch" class="heading-link"><i class="fas fa-link"></i></a><a href="#allMatch" class="headerlink" title="allMatch"></a>allMatch</h6>      <p>​可以用来判断是否都符合匹配条件，结果为boolean类型。如果都符合结果为true，否则结果为false。</p><p>例子：</p><p>​判断是否所有的作家都是成年人</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        判断是否所有的作家都是成年人</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> authors.stream()</span><br><span class="line">                .allMatch(author -&gt; author.getAge() &gt;= <span class="number">18</span>);</span><br><span class="line">        System.out.println(flag);</span><br></pre></td></tr></table></div></figure>        <h6 id="noneMatch"   >          <a href="#noneMatch" class="heading-link"><i class="fas fa-link"></i></a><a href="#noneMatch" class="headerlink" title="noneMatch"></a>noneMatch</h6>      <p>​可以判断流中的元素是否都不符合匹配条件。如果都不符合结果为true，否则结果为false</p><p>例子：</p><p>​判断作家是否都没有超过100岁的。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        判断作家是否都没有超过100岁的。</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> authors.stream()</span><br><span class="line">                .noneMatch(author -&gt; author.getAge() &gt; <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(b);</span><br></pre></td></tr></table></div></figure>        <h6 id="findAny"   >          <a href="#findAny" class="heading-link"><i class="fas fa-link"></i></a><a href="#findAny" class="headerlink" title="findAny"></a>findAny</h6>      <p>​获取流中的任意一个元素。该方法没有办法保证获取的一定是流中的第一个元素。</p><p>例子：</p><p>​获取任意一个年龄大于18的作家，如果存在就输出他的名字</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        获取任意一个年龄大于18的作家，如果存在就输出他的名字</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        Optional&lt;Author&gt; optionalAuthor = authors.stream()</span><br><span class="line">                .filter(author -&gt; author.getAge()&gt;<span class="number">18</span>)</span><br><span class="line">                .findAny();</span><br><span class="line"></span><br><span class="line">        optionalAuthor.ifPresent(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></div></figure>        <h6 id="findFirst"   >          <a href="#findFirst" class="heading-link"><i class="fas fa-link"></i></a><a href="#findFirst" class="headerlink" title="findFirst"></a>findFirst</h6>      <p>​获取流中的第一个元素。</p><p>例子：</p><p>​获取一个年龄最小的作家，并输出他的姓名。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        获取一个年龄最小的作家，并输出他的姓名。</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        Optional&lt;Author&gt; first = authors.stream()</span><br><span class="line">                .sorted((o1, o2) -&gt; o1.getAge() - o2.getAge())</span><br><span class="line">                .findFirst();</span><br><span class="line"></span><br><span class="line">        first.ifPresent(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></div></figure>        <h5 id="reduce归并"   >          <a href="#reduce归并" class="heading-link"><i class="fas fa-link"></i></a><a href="#reduce归并" class="headerlink" title="reduce归并"></a>reduce归并</h5>      <p>​对流中的数据按照你指定的计算方式计算出一个结果。（缩减操作）</p><p>​reduce的作用是把stream中的元素给组合起来，我们可以传入一个初始值，它会按照我们的计算方式依次拿流中的元素和初始化值进行计算，计算结果再和后面的元素计算。</p><p>​reduce两个参数的重载形式内部的计算方式如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> identity;</span><br><span class="line"><span class="keyword">for</span> (T element : <span class="built_in">this</span> stream)</span><br><span class="line">result = accumulator.apply(result, element)</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></div></figure><p>​其中identity就是我们可以通过方法参数传入的初始值，accumulator的apply具体进行什么计算也是我们通过方法参数来确定的。</p><p>例子：</p><p>​使用reduce求所有作者年龄的和</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        使用reduce求所有作者年龄的和</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> authors.stream()</span><br><span class="line">                .distinct()</span><br><span class="line">                .map(author -&gt; author.getAge())</span><br><span class="line">                .reduce(<span class="number">0</span>, (result, element) -&gt; result + element);</span><br><span class="line">        System.out.println(sum);</span><br></pre></td></tr></table></div></figure><p>​使用reduce求所有作者中年龄的最大值</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        使用reduce求所有作者中年龄的最大值</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">max</span> <span class="operator">=</span> authors.stream()</span><br><span class="line">                .map(author -&gt; author.getAge())</span><br><span class="line">                .reduce(Integer.MIN_VALUE, (result, element) -&gt; result &lt; element ? element : result);</span><br><span class="line"></span><br><span class="line">        System.out.println(max);</span><br></pre></td></tr></table></div></figure><p>​使用reduce求所有作者中年龄的最小值</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        使用reduce求所有作者中年龄的最小值</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">min</span> <span class="operator">=</span> authors.stream()</span><br><span class="line">                .map(author -&gt; author.getAge())</span><br><span class="line">                .reduce(Integer.MAX_VALUE, (result, element) -&gt; result &gt; element ? element : result);</span><br><span class="line">        System.out.println(min);</span><br></pre></td></tr></table></div></figure><p>​reduce一个参数的重载形式内部的计算</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">foundAny</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">for</span> (T element : <span class="built_in">this</span> stream) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!foundAny) &#123;</span><br><span class="line">          foundAny = <span class="literal">true</span>;</span><br><span class="line">          result = element;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          result = accumulator.apply(result, element);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> foundAny ? Optional.of(result) : Optional.empty();</span><br></pre></td></tr></table></div></figure><p>​如果用一个参数的重载方法去求最小值代码如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        使用reduce求所有作者中年龄的最小值</span></span><br><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">Optional&lt;Integer&gt; minOptional = authors.stream()</span><br><span class="line">        .map(author -&gt; author.getAge())</span><br><span class="line">        .reduce((result, element) -&gt; result &gt; element ? element : result);</span><br><span class="line">minOptional.ifPresent(age-&gt; System.out.println(age));</span><br></pre></td></tr></table></div></figure>        <h3 id="3-5-注意事项"   >          <a href="#3-5-注意事项" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-5-注意事项" class="headerlink" title="3.5 注意事项"></a>3.5 注意事项</h3>      <ul><li>惰性求值（如果没有终结操作，没有中间操作是不会得到执行的）</li><li>流是一次性的（一旦一个流对象经过一个终结操作后。这个流就不能再被使用）</li><li>不会影响原数据（我们在流中可以多数据做很多处理。但是正常情况下是不会影响原来集合中的元素的。这往往也是我们期望的）</li></ul>        <h2 id="4-Optional"   >          <a href="#4-Optional" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-Optional" class="headerlink" title="4. Optional"></a>4. Optional</h2>              <h3 id="4-1-概述"   >          <a href="#4-1-概述" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3>      <p>​我们在编写代码的时候出现最多的就是空指针异常。所以在很多情况下我们需要做各种非空的判断。</p><p>​例如：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Author</span> <span class="variable">author</span> <span class="operator">=</span> getAuthor();</span><br><span class="line"><span class="keyword">if</span>(author!=<span class="literal">null</span>)&#123;</span><br><span class="line">    System.out.println(author.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>​尤其是对象中的属性还是一个对象的情况下。这种判断会更多。</p><p>​而过多的判断语句会让我们的代码显得臃肿不堪。</p><p>​所以在JDK8中引入了Optional,养成使用Optional的习惯后你可以写出更优雅的代码来避免空指针异常。</p><p>​并且在很多函数式编程相关的API中也都用到了Optional，如果不会使用Optional也会对函数式编程的学习造成影响。</p>        <h3 id="4-2-使用"   >          <a href="#4-2-使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-2-使用" class="headerlink" title="4.2 使用"></a>4.2 使用</h3>              <h4 id="4-2-1-创建对象"   >          <a href="#4-2-1-创建对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-2-1-创建对象" class="headerlink" title="4.2.1 创建对象"></a>4.2.1 创建对象</h4>      <p>​Optional就好像是包装类，可以把我们的具体数据封装Optional对象内部。然后我们去使用Optional中封装好的方法操作封装进去的数据就可以非常优雅的避免空指针异常。</p><p>​我们一般使用<strong>Optional</strong>的<strong>静态方法ofNullable</strong>来把数据封装成一个Optional对象。无论传入的参数是否为null都不会出现问题。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Author</span> <span class="variable">author</span> <span class="operator">=</span> getAuthor();</span><br><span class="line">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(author);</span><br></pre></td></tr></table></div></figure><p>​你可能会觉得还要加一行代码来封装数据比较麻烦。但是如果改造下getAuthor方法，让其的返回值就是封装好的Optional的话，我们在使用时就会方便很多。</p><p>​而且在实际开发中我们的数据很多是从数据库获取的。Mybatis从3.5版本可以也已经支持Optional了。我们可以直接把dao方法的返回值类型定义成Optional类型，MyBastis会自己把数据封装成Optional对象返回。封装的过程也不需要我们自己操作。</p><p>​如果你<strong>确定一个对象不是空</strong>的则可以使用<strong>Optional</strong>的<strong>静态方法of</strong>来把数据封装成Optional对象。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Author</span> <span class="variable">author</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Author</span>();</span><br><span class="line">Optional&lt;Author&gt; authorOptional = Optional.of(author);</span><br></pre></td></tr></table></div></figure><p>​但是一定要注意，如果使用of的时候传入的参数必须不为null。（尝试下传入null会出现什么结果）</p><p>​如果一个方法的返回值类型是Optional类型。而如果我们经判断发现某次计算得到的返回值为null，这个时候就需要把null封装成Optional对象返回。这时则可以使用<strong>Optional</strong>的<strong>静态方法empty</strong>来进行封装。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional.empty()</span><br></pre></td></tr></table></div></figure><p>​</p><p>​所以最后你觉得哪种方式会更方便呢？<strong>ofNullable</strong></p>        <h4 id="4-2-2-安全消费值"   >          <a href="#4-2-2-安全消费值" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-2-2-安全消费值" class="headerlink" title="4.2.2 安全消费值"></a>4.2.2 安全消费值</h4>      <p>​我们获取到一个Optional对象后肯定需要对其中的数据进行使用。这时候我们可以使用其<strong>ifPresent</strong>方法对来消费其中的值。</p><p>​这个方法会判断其内封装的数据是否为空，不为空时才会执行具体的消费代码。这样使用起来就更加安全了。</p><p>​例如,以下写法就优雅的避免了空指针异常。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor());</span><br><span class="line"></span><br><span class="line">authorOptional.ifPresent(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></div></figure>        <h4 id="4-2-3-获取值"   >          <a href="#4-2-3-获取值" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-2-3-获取值" class="headerlink" title="4.2.3 获取值"></a>4.2.3 获取值</h4>      <p>​如果我们想获取值自己进行处理可以使用get方法获取，但是不推荐。因为当Optional内部的数据为空的时候会出现异常。</p>        <h4 id="4-2-4-安全获取值"   >          <a href="#4-2-4-安全获取值" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-2-4-安全获取值" class="headerlink" title="4.2.4 安全获取值"></a>4.2.4 安全获取值</h4>      <p>​如果我们期望安全的获取值。我们不推荐使用get方法，而是使用Optional提供的以下方法。</p><ul><li><p>orElseGet</p><p>获取数据并且设置数据为空时的默认值。如果数据不为空就能获取到该数据。如果为空则根据你传入的参数来创建对象作为默认值返回。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor());</span><br><span class="line"><span class="type">Author</span> <span class="variable">author1</span> <span class="operator">=</span> authorOptional.orElseGet(() -&gt; <span class="keyword">new</span> <span class="title class_">Author</span>());</span><br></pre></td></tr></table></div></figure></li><li><p>orElseThrow</p><p>获取数据，如果数据不为空就能获取到该数据。如果为空则根据你传入的参数来创建异常抛出。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">Author</span> <span class="variable">author</span> <span class="operator">=</span> authorOptional.orElseThrow((Supplier&lt;Throwable&gt;) () -&gt; <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;author为空&quot;</span>));</span><br><span class="line">    System.out.println(author.getName());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">    throwable.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></li></ul>        <h4 id="4-2-5-过滤"   >          <a href="#4-2-5-过滤" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-2-5-过滤" class="headerlink" title="4.2.5 过滤"></a>4.2.5 过滤</h4>      <p>​我们可以使用filter方法对数据进行过滤。如果原本是有数据的，但是不符合判断，也会变成一个无数据的Optional对象。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor());</span><br><span class="line">authorOptional.filter(author -&gt; author.getAge()&gt;<span class="number">100</span>).ifPresent(author -&gt; System.out.println(author.getName()));</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="4-2-6-判断"   >          <a href="#4-2-6-判断" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-2-6-判断" class="headerlink" title="4.2.6 判断"></a>4.2.6 判断</h4>      <p>​我们可以使用isPresent方法进行是否存在数据的判断。如果为空返回值为false,如果不为空，返回值为true。但是这种方式并不能体现Optional的好处，<strong>更推荐使用ifPresent方法</strong>。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (authorOptional.isPresent()) &#123;</span><br><span class="line">    System.out.println(authorOptional.get().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="4-2-7-数据转换"   >          <a href="#4-2-7-数据转换" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-2-7-数据转换" class="headerlink" title="4.2.7 数据转换"></a>4.2.7 数据转换</h4>      <p>​Optional还提供了map可以让我们的对数据进行转换，并且转换得到的数据也还是被Optional包装好的，保证了我们的使用安全。</p><p>例如我们想获取作家的书籍集合。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testMap</span><span class="params">()</span> &#123;</span><br><span class="line">    Optional&lt;Author&gt; authorOptional = getAuthorOptional();</span><br><span class="line">    Optional&lt;List&lt;Book&gt;&gt; optionalBooks = authorOptional.map(author -&gt; author.getBooks());</span><br><span class="line">    optionalBooks.ifPresent(books -&gt; System.out.println(books));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="5-函数式接口"   >          <a href="#5-函数式接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-函数式接口" class="headerlink" title="5. 函数式接口"></a>5. 函数式接口</h2>              <h3 id="5-1-概述"   >          <a href="#5-1-概述" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3>      <p>​<strong>只有一个抽象方法</strong>的接口我们称之为函数接口。</p><p>​JDK的函数式接口都加上了**@FunctionalInterface** 注解进行标识。但是无论是否加上该注解只要接口中只有一个抽象方法，都是函数式接口。</p>        <h3 id="5-2-常见函数式接口"   >          <a href="#5-2-常见函数式接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-2-常见函数式接口" class="headerlink" title="5.2 常见函数式接口"></a>5.2 常见函数式接口</h3>      <ul><li><p>​Consumer 消费接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数进行消费。</p><p><img src="/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/image-20211028145622163-16354041894551.png" alt="image-20211028145622163"></p></li><li><p>​Function 计算转换接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数计算或转换，把结果返回</p><p><img src="/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/image-20211028145707862-16354042291112.png" alt="image-20211028145707862"></p></li><li><p>​Predicate 判断接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数条件判断，返回判断结果</p><p><img src="/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/image-20211028145818743-16354043004393.png" alt="image-20211028145818743"></p></li><li><p>​Supplier 生产型接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中创建对象，把创建好的对象返回</p></li></ul><p><img src="/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/image-20211028145843368-16354043246954.png" alt="image-20211028145843368"></p>        <h3 id="5-3-常用的默认方法"   >          <a href="#5-3-常用的默认方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-3-常用的默认方法" class="headerlink" title="5.3 常用的默认方法"></a>5.3 常用的默认方法</h3>      <ul><li><p>and</p><p>我们在使用Predicate接口时候可能需要进行判断条件的拼接。而and方法相当于是使用&amp;&amp;来拼接两个判断条件</p><p>例如：</p><p>打印作家中年龄大于17并且姓名的长度大于1的作家。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">Stream&lt;Author&gt; authorStream = authors.stream();</span><br><span class="line">authorStream.filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;Author&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Author author)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> author.getAge()&gt;<span class="number">17</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.and(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;Author&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Author author)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> author.getName().length()&gt;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)).forEach(author -&gt; System.out.println(author));</span><br></pre></td></tr></table></div></figure></li><li><p>or </p><p>我们在使用Predicate接口时候可能需要进行判断条件的拼接。而or方法相当于是使用||来拼接两个判断条件。</p><p>例如：</p><p>打印作家中年龄大于17或者姓名的长度小于2的作家。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        打印作家中年龄大于17或者姓名的长度小于2的作家。</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        authors.stream()</span><br><span class="line">                .filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;Author&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Author author)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> author.getAge()&gt;<span class="number">17</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;.or(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;Author&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Author author)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> author.getName().length()&lt;<span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)).forEach(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></div></figure></li><li><p>negate</p><p>Predicate接口中的方法。negate方法相当于是在判断添加前面加了个! 表示取反</p><p>例如：</p><p>打印作家中年龄不大于17的作家。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        打印作家中年龄不大于17的作家。</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        authors.stream()</span><br><span class="line">                .filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;Author&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Author author)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> author.getAge()&gt;<span class="number">17</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;.negate()).forEach(author -&gt; System.out.println(author.getAge()));</span><br></pre></td></tr></table></div></figure></li></ul>        <h2 id="6-方法引用"   >          <a href="#6-方法引用" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-方法引用" class="headerlink" title="6. 方法引用"></a>6. 方法引用</h2>      <p>​我们在使用lambda时，如果方法体中只有一个方法的调用的话（包括构造方法）,我们可以用方法引用进一步简化代码。</p>        <h3 id="6-1-推荐用法"   >          <a href="#6-1-推荐用法" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-1-推荐用法" class="headerlink" title="6.1 推荐用法"></a>6.1 推荐用法</h3>      <p>​我们在使用lambda时不需要考虑什么时候用方法引用，用哪种方法引用，方法引用的格式是什么。我们只需要在写完lambda方法发现方法体只有一行代码，并且是方法的调用时使用快捷键尝试是否能够转换成方法引用即可。</p><p>​当我们方法引用使用的多了慢慢的也可以直接写出方法引用。</p>        <h3 id="6-2-基本格式"   >          <a href="#6-2-基本格式" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-2-基本格式" class="headerlink" title="6.2 基本格式"></a>6.2 基本格式</h3>      <p>​类名或者对象名::方法名</p>        <h3 id="6-3-语法详解-了解"   >          <a href="#6-3-语法详解-了解" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-3-语法详解-了解" class="headerlink" title="6.3 语法详解(了解)"></a>6.3 语法详解(了解)</h3>              <h4 id="6-3-1-引用类的静态方法"   >          <a href="#6-3-1-引用类的静态方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-3-1-引用类的静态方法" class="headerlink" title="6.3.1 引用类的静态方法"></a>6.3.1 引用类的静态方法</h4>      <p>​其实就是引用类的静态方法</p>        <h5 id="格式"   >          <a href="#格式" class="heading-link"><i class="fas fa-link"></i></a><a href="#格式" class="headerlink" title="格式"></a>格式</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名::方法名</span><br></pre></td></tr></table></div></figure>        <h5 id="使用前提"   >          <a href="#使用前提" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用前提" class="headerlink" title="使用前提"></a>使用前提</h5>      <p>​如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了某个类的静态方法</strong>，并且我们把要重写的<strong>抽象方法中所有的参数都按照顺序传入了这个静态方法中</strong>，这个时候我们就可以引用类的静态方法。</p><p>​</p><p>例如：</p><p>如下代码就可以用方法引用进行简化</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"></span><br><span class="line">Stream&lt;Author&gt; authorStream = authors.stream();</span><br><span class="line"></span><br><span class="line">authorStream.map(author -&gt; author.getAge())</span><br><span class="line">        .map(age-&gt;String.valueOf(age));</span><br></pre></td></tr></table></div></figure><p>注意，如果我们所重写的方法是没有参数的，调用的方法也是没有参数的也相当于符合以上规则。</p><p>优化后如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"></span><br><span class="line">Stream&lt;Author&gt; authorStream = authors.stream();</span><br><span class="line"></span><br><span class="line">authorStream.map(author -&gt; author.getAge())</span><br><span class="line">        .map(String::valueOf);</span><br></pre></td></tr></table></div></figure>        <h4 id="6-3-2-引用对象的实例方法"   >          <a href="#6-3-2-引用对象的实例方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-3-2-引用对象的实例方法" class="headerlink" title="6.3.2 引用对象的实例方法"></a>6.3.2 引用对象的实例方法</h4>              <h5 id="格式-1"   >          <a href="#格式-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#格式-1" class="headerlink" title="格式"></a>格式</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名::方法名</span><br></pre></td></tr></table></div></figure>        <h5 id="使用前提-1"   >          <a href="#使用前提-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用前提-1" class="headerlink" title="使用前提"></a>使用前提</h5>      <p>​如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了某个对象的成员方法</strong>，并且我们把要重写的<strong>抽象方法中所有的参数都按照顺序传入了这个成员方法中</strong>，这个时候我们就可以引用对象的实例方法</p><p>例如：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"></span><br><span class="line">Stream&lt;Author&gt; authorStream = authors.stream();</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">authorStream.map(author -&gt; author.getName())</span><br><span class="line">        .forEach(name-&gt;sb.append(name));</span><br></pre></td></tr></table></div></figure><p>优化后：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"></span><br><span class="line">Stream&lt;Author&gt; authorStream = authors.stream();</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">authorStream.map(author -&gt; author.getName())</span><br><span class="line">        .forEach(sb::append);</span><br></pre></td></tr></table></div></figure>        <h4 id="6-3-4-引用类的实例方法"   >          <a href="#6-3-4-引用类的实例方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-3-4-引用类的实例方法" class="headerlink" title="6.3.4 引用类的实例方法"></a>6.3.4 引用类的实例方法</h4>              <h5 id="格式-2"   >          <a href="#格式-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#格式-2" class="headerlink" title="格式"></a>格式</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名::方法名</span><br></pre></td></tr></table></div></figure>        <h5 id="使用前提-2"   >          <a href="#使用前提-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用前提-2" class="headerlink" title="使用前提"></a>使用前提</h5>      <p>​如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了第一个参数的成员方法</strong>，并且我们把要<strong>重写的抽象方法中剩余的所有的参数都按照顺序传入了这个成员方法中</strong>，这个时候我们就可以引用类的实例方法。</p><p>例如：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">interface</span> <span class="title class_">UseString</span>&#123;</span><br><span class="line">       String <span class="title function_">use</span><span class="params">(String str,<span class="type">int</span> start,<span class="type">int</span> length)</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">subAuthorName</span><span class="params">(String str, UseString useString)</span>&#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">return</span> useString.use(str,start,length);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">       subAuthorName(<span class="string">&quot;三更草堂&quot;</span>, <span class="keyword">new</span> <span class="title class_">UseString</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> String <span class="title function_">use</span><span class="params">(String str, <span class="type">int</span> start, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> str.substring(start,length);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>优化后如下：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    subAuthorName(<span class="string">&quot;三更草堂&quot;</span>, String::substring);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="6-3-5-构造器引用"   >          <a href="#6-3-5-构造器引用" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-3-5-构造器引用" class="headerlink" title="6.3.5 构造器引用"></a>6.3.5 构造器引用</h4>      <p>​如果方法体中的一行代码是构造器的话就可以使用构造器引用。</p>        <h5 id="格式-3"   >          <a href="#格式-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#格式-3" class="headerlink" title="格式"></a>格式</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名::<span class="keyword">new</span></span><br></pre></td></tr></table></div></figure>        <h5 id="使用前提-3"   >          <a href="#使用前提-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用前提-3" class="headerlink" title="使用前提"></a>使用前提</h5>      <p>​如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了某个类的构造方法</strong>，并且我们把<strong>要重写的抽象方法中的所有的参数都按照顺序传入了这个构造方法中</strong>，这个时候我们就可以引用构造器。</p><p>例如：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">authors.stream()</span><br><span class="line">        .map(author -&gt; author.getName())</span><br><span class="line">        .map(name-&gt;<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(name))</span><br><span class="line">        .map(sb-&gt;sb.append(<span class="string">&quot;-三更&quot;</span>).toString())</span><br><span class="line">        .forEach(str-&gt; System.out.println(str));</span><br></pre></td></tr></table></div></figure><p>优化后：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">authors.stream()</span><br><span class="line">        .map(author -&gt; author.getName())</span><br><span class="line">        .map(StringBuilder::<span class="keyword">new</span>)</span><br><span class="line">        .map(sb-&gt;sb.append(<span class="string">&quot;-三更&quot;</span>).toString())</span><br><span class="line">        .forEach(str-&gt; System.out.println(str));</span><br></pre></td></tr></table></div></figure>        <h2 id="7-高级用法"   >          <a href="#7-高级用法" class="heading-link"><i class="fas fa-link"></i></a><a href="#7-高级用法" class="headerlink" title="7. 高级用法"></a>7. 高级用法</h2>              <h3 id="基本数据类型优化"   >          <a href="#基本数据类型优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本数据类型优化" class="headerlink" title="基本数据类型优化"></a>基本数据类型优化</h3>      <p>​我们之前用到的很多Stream的方法由于都使用了泛型。所以涉及到的参数和返回值都是引用数据类型。</p><p>​即使我们操作的是整数小数，但是实际用的都是他们的包装类。JDK5中引入的自动装箱和自动拆箱让我们在使用对应的包装类时就好像使用基本数据类型一样方便。但是你一定要知道装箱和拆箱肯定是要消耗时间的。虽然这个时间消耗很下。但是在大量的数据不断的重复装箱拆箱的时候，你就不能无视这个时间损耗了。</p><p>​所以为了让我们能够对这部分的时间消耗进行优化。Stream还提供了很多专门针对基本数据类型的方法。</p><p>​例如：mapToInt,mapToLong,mapToDouble,flatMapToInt,flatMapToDouble等。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test27</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">    authors.stream()</span><br><span class="line">            .map(author -&gt; author.getAge())</span><br><span class="line">            .map(age -&gt; age + <span class="number">10</span>)</span><br><span class="line">            .filter(age-&gt;age&gt;<span class="number">18</span>)</span><br><span class="line">            .map(age-&gt;age+<span class="number">2</span>)</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    authors.stream()</span><br><span class="line">            .mapToInt(author -&gt; author.getAge())</span><br><span class="line">            .map(age -&gt; age + <span class="number">10</span>)</span><br><span class="line">            .filter(age-&gt;age&gt;<span class="number">18</span>)</span><br><span class="line">            .map(age-&gt;age+<span class="number">2</span>)</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="并行流"   >          <a href="#并行流" class="heading-link"><i class="fas fa-link"></i></a><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h3>      <p>​当流中有大量元素时，我们可以使用并行流去提高操作的效率。其实并行流就是把任务分配给多个线程去完全。如果我们自己去用代码实现的话其实会非常的复杂，并且要求你对并发编程有足够的理解和认识。而如果我们使用Stream的话，我们只需要修改一个方法的调用就可以使用并行流来帮我们实现，从而提高效率。</p><p>​parallel方法可以把串行流转换成并行流。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test28</span><span class="params">()</span> &#123;</span><br><span class="line">    Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> stream.parallel()</span><br><span class="line">            .peek(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Integer&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Integer num)</span> &#123;</span><br><span class="line">                    System.out.println(num+Thread.currentThread().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .filter(num -&gt; num &gt; <span class="number">5</span>)</span><br><span class="line">            .reduce((result, ele) -&gt; result + ele)</span><br><span class="line">            .get();</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>​也可以通过parallelStream直接获取并行流对象。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">authors.parallelStream()</span><br><span class="line">        .map(author -&gt; author.getAge())</span><br><span class="line">        .map(age -&gt; age + <span class="number">10</span>)</span><br><span class="line">        .filter(age-&gt;age&gt;<span class="number">18</span>)</span><br><span class="line">        .map(age-&gt;age+<span class="number">2</span>)</span><br><span class="line">        .forEach(System.out::println);</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文详解在线人数统计</title>
      <link href="/2022/10/09/%E4%B8%80%E6%96%87%E8%AF%A6%E8%A7%A3%E5%9C%A8%E7%BA%BF%E4%BA%BA%E6%95%B0%E7%BB%9F%E8%AE%A1/"/>
      <url>/2022/10/09/%E4%B8%80%E6%96%87%E8%AF%A6%E8%A7%A3%E5%9C%A8%E7%BA%BF%E4%BA%BA%E6%95%B0%E7%BB%9F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>在线人数的统计</p><span id="more"></span>        <h4 id="使用场景"   >          <a href="#使用场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4>      <p>在视频场景下，经常可以看到当前有多少人在看，或者某些场景下，需要我们计算直播间的瞬时人数，作为后端人员，sql编写是必须的，但是这种场景的sql在怎么编写呢？</p><p>要实现动态计算访客，可以给sql打一个数据标签，进入（访问）时记录为1，退出时记录为-1。</p>        <h4 id="实现步骤"   >          <a href="#实现步骤" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4>      <p><strong>1、取用户进入直播间时为1，退出为-1。</strong></p><p>这里贴上nowCode原题目</p><p><span class="exturl"><a class="exturl__link"   href="https://www.nowcoder.com/practice/d69677e41f9a4bf3b3ed7a42573e9490" >https://www.nowcoder.com/practice/d69677e41f9a4bf3b3ed7a42573e9490</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">  course_id,</span><br><span class="line">  user_id,</span><br><span class="line">  in_datetime dt,</span><br><span class="line">  1 uv</span><br><span class="line">from</span><br><span class="line">  attend_tb</span><br><span class="line">union all</span><br><span class="line">select</span><br><span class="line">  course_id,</span><br><span class="line">  user_id,</span><br><span class="line">  out_datetime dt,</span><br><span class="line">  -1 uv</span><br><span class="line">from</span><br><span class="line">  attend_tb</span><br><span class="line">)t1</span><br></pre></td></tr></table></div></figure><p>这样可以计算到每个进入或出去的记录的值，方便后面进行计算</p><p>2、<strong>使用窗口函数进行计算</strong></p><p>关于窗口函数，不熟悉的可以前去这个知乎er解析里面看，讲解的十分清晰。</p><p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/92654574" >通俗易懂的学会：SQL窗口函数 - 知乎 (zhihu.com)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(uv) over(partition by course_id order by dt,uv desc) uv_cnt</span><br></pre></td></tr></table></div></figure><p>关键点：按照日期排序，就可以得到每个时间瞬时进入或出去的人数，使用sum(uv)则可以计算瞬时值，因为需要计算每个课程的瞬时值，所以需要按照课程的id进行分组，这个分组的好处是，不是聚合分组，不会减少行的数量。</p><p><strong>3、 最后计算最大值即可</strong></p><p>贴上完整sql代码</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">course_id,</span><br><span class="line">course_name,</span><br><span class="line">max(uv_cnt) max_num</span><br><span class="line">from </span><br><span class="line">(</span><br><span class="line">select </span><br><span class="line">a.course_id,</span><br><span class="line">course_name,</span><br><span class="line">sum(uv) over(partition by course_id order by dt,uv desc) uv_cnt</span><br><span class="line">from (</span><br><span class="line">select</span><br><span class="line">  course_id,</span><br><span class="line">  user_id,</span><br><span class="line">  in_datetime dt,</span><br><span class="line">  1 uv</span><br><span class="line">from</span><br><span class="line">  attend_tb</span><br><span class="line">union all</span><br><span class="line">select</span><br><span class="line">  course_id,</span><br><span class="line">  user_id,</span><br><span class="line">  out_datetime dt,</span><br><span class="line">  -1 uv</span><br><span class="line">from</span><br><span class="line">  attend_tb</span><br><span class="line">)t1 join course_tb a on t1.course_id=a.course_id</span><br><span class="line">)t2</span><br><span class="line">group by course_id,course_name order by course_id</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js入门到入土</title>
      <link href="/2022/10/03/Vue-js%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
      <url>/2022/10/03/Vue-js%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>Vue学习之旅</p><span id="more"></span>        <h3 id="webpack"   >          <a href="#webpack" class="heading-link"><i class="fas fa-link"></i></a><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3>      <p>前端模块化，解决js兼容问题，项目打包等都需要webpack使用node创建前端工程</p><p><img src="/image.png"></p><p>-D参数 在开发阶段使用的包</p><p>-S参数 在开发上线都需要的包</p><p>webpack配置文件编写：</p><figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports=<span class="punctuation">&#123;</span>    <span class="comment">//开发环境 </span></span><br><span class="line">    development | production    mode<span class="punctuation">:</span>&#x27;development&#x27;</span><br><span class="line"><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></div></figure><p>在package.json文件的scripts脚本加入(可以使用npm运行的脚本)</p><p><code>&quot;dev&quot; :&quot;webpack&quot;</code></p><p>npm run dev 后会发现一个dist文件夹，引入dist&#x2F;main.js文件，即可</p>        <h4 id="两种模式的区别"   >          <a href="#两种模式的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#两种模式的区别" class="headerlink" title="两种模式的区别"></a>两种模式的区别</h4>      <figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">development    开发环境使用，打包速度快</span><br><span class="line">production     上线的时候用，打包慢，但是压缩的文件更小</span><br></pre></td></tr></table></div></figure>        <h4 id="默认约定和改变"   >          <a href="#默认约定和改变" class="heading-link"><i class="fas fa-link"></i></a><a href="#默认约定和改变" class="headerlink" title="默认约定和改变"></a>默认约定和改变</h4>      <p>打包目录：.&#x2F;src&#x2F;index.js</p><p>输出路径    .&#x2F;dist&#x2F;main.js</p><figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定处理的文件    </span></span><br><span class="line">entry<span class="punctuation">:</span> path.join(__dirname<span class="punctuation">,</span>&#x27;./src/index.js&#x27;)<span class="punctuation">,</span></span><br><span class="line">output<span class="punctuation">:</span><span class="punctuation">&#123;</span>  path<span class="punctuation">:</span><span class="punctuation">,</span>  filename<span class="punctuation">:</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="安装配置webpack插件"   >          <a href="#安装配置webpack插件" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装配置webpack插件" class="headerlink" title="安装配置webpack插件"></a>安装配置webpack插件</h4>      <p>npm install <span class="exturl"><a class="exturl__link"   href="mailto:&#x77;&#x65;&#98;&#x70;&#x61;&#x63;&#107;&#45;&#100;&#101;&#x76;&#45;&#x73;&#x65;&#114;&#x76;&#x65;&#114;&#64;&#51;&#x2e;&#x31;&#x31;&#x2e;&#x32;" >&#x77;&#x65;&#98;&#x70;&#x61;&#x63;&#107;&#45;&#100;&#101;&#x76;&#45;&#x73;&#x65;&#114;&#x76;&#x65;&#114;&#64;&#51;&#x2e;&#x31;&#x31;&#x2e;&#x32;</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> -D</p><p>更改配置文件“scripts” :”dev serve “</p><p>重新run发现报错更改webpack-cli版本为4.10.0</p><p>安装了webpack-dev-server后，生成的js文件是在内存中的，需要手动引入</p><script src="/main.js"></script><p>html-webpack-plugin 配置完成不用手动进入src的index页面，打开8080就是首页</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入HTML插件 </span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span>=<span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> htmlPlugin=<span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;    </span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="comment">//指定原文件存放路径    </span></span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">    <span class="comment">//指定生成文件的存放路径 &#125;)</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span>=&#123;    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,    plugins :[htmlPlugin]   <span class="comment">//通过节点使插件生效 &#125;</span></span><br></pre></td></tr></table></div></figure><p>引入这个插件不需要再手动引入打包过的js文件</p>        <h4 id="devServer节点"   >          <a href="#devServer节点" class="heading-link"><i class="fas fa-link"></i></a><a href="#devServer节点" class="headerlink" title="devServer节点"></a>devServer节点</h4>      <p>设置默认打开浏览器</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">`devServer:&#123;        </span><br><span class="line">open:true,   //是否打开浏览器        </span><br><span class="line">host:&#x27;127.0.0.1&#x27;,   //主机地址        </span><br><span class="line">port: 80     //端口号    </span><br><span class="line"></span><br><span class="line">&#125;`</span><br></pre></td></tr></table></div></figure>        <h4 id="loader"   >          <a href="#loader" class="heading-link"><i class="fas fa-link"></i></a><a href="#loader" class="headerlink" title="loader"></a>loader</h4>      <p>加载css等文件注意：</p><p>如果报错loader找不到先安装</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install style-loader css-loader</span><br></pre></td></tr></table></div></figure><p>配置文件</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module:&#123;</span><br><span class="line">           rules:[</span><br><span class="line">             &#123;test:/\.css$/,use:[&#123; loader: &#x27;style-loader&#x27; &#125;, </span><br><span class="line">             &#123; loader: &#x27;css-loader&#x27; &#125;]&#125;，</span><br><span class="line">             </span><br><span class="line">         ]</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>打包处理less文件</p><p>安装loadernpm i <span class="exturl"><a class="exturl__link"   href="mailto:&#108;&#101;&#x73;&#x73;&#x2d;&#108;&#x6f;&#x61;&#100;&#101;&#114;&#64;&#x31;&#x30;&#x2e;&#48;&#46;&#49;" >&#108;&#101;&#x73;&#x73;&#x2d;&#108;&#x6f;&#x61;&#100;&#101;&#114;&#64;&#x31;&#x30;&#x2e;&#48;&#46;&#49;</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> <span class="exturl"><a class="exturl__link"   href="mailto:&#108;&#101;&#x73;&#115;&#x40;&#x34;&#x2e;&#x31;&#x2e;&#x31;" >&#108;&#101;&#x73;&#115;&#x40;&#x34;&#x2e;&#x31;&#x2e;&#x31;</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> -D</p><p>更改配置文件  图片loader加载需要安装url-loader file-loader</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i url-loader@4.1.1 file-loader@6.2.0 -D</span><br><span class="line"></span><br><span class="line">配置文件</span><br><span class="line">&#123;test:/\.gif|jpg|png$/,user:[&#123;loader:&#x27;url-loader|limit=22229&#x27;&#125;]&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="配置build命令"   >          <a href="#配置build命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置build命令" class="headerlink" title="配置build命令"></a>配置build命令</h4>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;build&quot; &quot;webpack --mode production&quot;</span><br></pre></td></tr></table></div></figure>        <h4 id="sourceMap"   >          <a href="#sourceMap" class="heading-link"><i class="fas fa-link"></i></a><a href="#sourceMap" class="headerlink" title="sourceMap"></a>sourceMap</h4>      <p>记录源代码代码的位置信息，以及打包的代码的位置信息更改配置文件中devtool的值即可在调试中输出准确的代码位置</p>        <h3 id="Vue"   >          <a href="#Vue" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3>              <h4 id="特点"   >          <a href="#特点" class="heading-link"><i class="fas fa-link"></i></a><a href="#特点" class="headerlink" title="特点"></a>特点</h4>      <p>双向绑定：不操作DOM的前提下，自动把用户填写的数据同步到数据源</p><p>数据驱动视图：页面监听数据，数据发生改变重新渲染页面</p>        <h4 id="MVVM架构"   >          <a href="#MVVM架构" class="heading-link"><i class="fas fa-link"></i></a><a href="#MVVM架构" class="headerlink" title="MVVM架构"></a>MVVM架构</h4>      <p>Model：数据源</p><p>View：当前页面所渲染的DOM结构</p><p>ViewModel ：vue实例</p>        <h4 id="使用步骤"   >          <a href="#使用步骤" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4>      <p>1、导入vue.js脚本文件</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot; https://cdn.staticfile.org/vue/2.6.12/vue.min.js&quot;&gt;&lt;/script&gt;`</span><br><span class="line"></span><br><span class="line">页面中声明一个被vue控制的DOM区域</span><br><span class="line"></span><br><span class="line">`&lt;div id=&quot;app&quot;&gt;&#123;&#123; message &#125;&#125;`</span><br><span class="line"></span><br><span class="line">创建vm实例对象</span><br><span class="line"></span><br><span class="line">``` vue</span><br><span class="line">const vm=new Vue(&#123;</span><br><span class="line">        el:&#x27;#app&#x27;,   //控制区域</span><br><span class="line">        data:&#123;       //数据源</span><br><span class="line">            message:&#x27;李四&#x27;,</span><br><span class="line">            list:[&#x27;1&#x27;,&#x27;2&#x27;],</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="内容渲染指令"   >          <a href="#内容渲染指令" class="heading-link"><i class="fas fa-link"></i></a><a href="#内容渲染指令" class="headerlink" title="内容渲染指令"></a>内容渲染指令</h4>              <h5 id="v-text"   >          <a href="#v-text" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h5>      <p>渲染值到标签中，但是会覆盖原有内容</p>        <h5 id="插值表达式"   >          <a href="#插值表达式" class="heading-link"><i class="fas fa-link"></i></a><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h5>      <p>作用同上，但是不会覆盖原来的内容</p>        <h5 id="v-html"   >          <a href="#v-html" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h5>      <p>渲染文本和HTML标签</p>        <h4 id="属性绑定指令"   >          <a href="#属性绑定指令" class="heading-link"><i class="fas fa-link"></i></a><a href="#属性绑定指令" class="headerlink" title="属性绑定指令"></a>属性绑定指令</h4>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">注意：插值表达式不能用在属性节点中，只能用在内容节点</span><br><span class="line">&lt;input type=&quot;text&quot; v-bind:placeholder=&quot;tips&quot;&gt;</span><br><span class="line">使用v-bind可以动态绑定属性，给那个属性绑定，就在哪个属性前面加上v-bind:，可以简写为：，例如:src</span><br><span class="line">插值表达式和v-bind可以进行简单运算</span><br><span class="line">&lt;div&gt;&#123;&#123;msg.split(&#x27;&#x27;).reverse()&#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="事件绑定"   >          <a href="#事件绑定" class="heading-link"><i class="fas fa-link"></i></a><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4>      <p>vue提供了v-on指令进行事件绑定</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-on:click=&quot;add&quot;&gt;+1&lt;/button&gt;   //:后面声明事件的类型</span><br></pre></td></tr></table></div></figure><p>并且vue提供methods对象允许我们定义js方法</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> methods:&#123;</span><br><span class="line">         add:function()&#123;</span><br><span class="line">            console.log(&#x27;ok&#x27;);</span><br><span class="line">            this.count++;</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">//简写</span><br><span class="line">add()&#123;</span><br><span class="line">    this.count++;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>通过this访问数据源中的对象</p><p>因为this指向的是Vue对象，可以使用this代替vue实例访问数据源中的值</p><p>简写以及传参</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;add(1)&quot;&gt;+1&lt;/button&gt;</span><br></pre></td></tr></table></div></figure><p>$event事件绑定</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//事件没有传递参数，则会有一个默认事件对象</span><br><span class="line"> add(e)&#123;</span><br><span class="line">            this.count++;</span><br><span class="line">            console.log(e);</span><br><span class="line">            console.log(e.target);</span><br><span class="line">         &#125;</span><br><span class="line">======控制台打印如下结果</span><br></pre></td></tr></table></div></figure><p><img src="F:\Blog\source\imgs\events.png"></p><p>但是如果方法传递了参数，就会覆盖这个事件对象可以通过vue内置对象，$event传入事件对象</p>        <h4 id="事件修饰符"   >          <a href="#事件修饰符" class="heading-link"><i class="fas fa-link"></i></a><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4>      <p>原生js中，我们可以通过事件的方法阻止事件默认行为和事件冒泡。在vue中提供的更加方便的实现:事件修饰符</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@click.prevent     //.prevent就可以阻止默认行为</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p><img src="/xiushifu.png"></p><p>按键修饰符</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; @keyup.enter=&quot;append&quot; placeholder=&quot;请输入&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="双向绑定"   >          <a href="#双向绑定" class="heading-link"><i class="fas fa-link"></i></a><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h4>      <p>双向数据绑定，vue提供v-model进行数据绑定，通过这个指令，用户在视图上面对数据的修改，可以被数据源感知到并更新，从而不用操作DOM。</p><p>v-bind:单向数据绑定，数据源改变会导致页面数据改变，但是反过来却不会</p><p>表单元素才能使用v-model指令，例如input,select,textareav-model修饰符</p><p> v-model会自动判断需要双向绑定的值，radio绑定的是checked属性，text则绑定value属性</p><p><img src="F:\Blog\source\imgs\vmodel.png"></p>        <h4 id="条件渲染"   >          <a href="#条件渲染" class="heading-link"><i class="fas fa-link"></i></a><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4>      <p>vue提供条件渲染v-if和v-show进行动态控制组件的展示</p><p>v-if</p><p>动态移除元素或者创建元素</p><p>v-show</p><p>添加和移除display:none元素</p><p>v-else搭配v-if使用</p><p><img src="F:\Blog\source\imgs\vif.png"></p>        <h4 id="列表渲染"   >          <a href="#列表渲染" class="heading-link"><i class="fas fa-link"></i></a><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h4>      <p>vue提供v-for进行对列表的渲染，渲染到哪个元素给那个元素添加v-for格式形如</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr v-for=&quot;index in list&quot;&gt;</span><br></pre></td></tr></table></div></figure><p>另外，v-for提供了一个可选参数，返回当前的索引</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr v-for=&quot;(item,index) in list&quot;&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123;index&#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123;item.age&#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123;item.sex&#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></div></figure><p>官方推荐使用v-for绑定一个key值，为每个对象的item值</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr v-for=&quot;(item,index) in list&quot; :key=&quot;item.id&quot;&gt;</span><br></pre></td></tr></table></div></figure><p><u>复习js删除</u></p><p>filter函数接受一个回调函数，返回的是过滤的条件</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">list</span>=<span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="keyword">return</span> item.<span class="property">id</span> !== id)</span><br></pre></td></tr></table></div></figure>        <h4 id="过滤器"   >          <a href="#过滤器" class="heading-link"><i class="fas fa-link"></i></a><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4>      <p>只能在vue2.0中使用，常用于文本格式化</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filters:&#123;</span><br><span class="line">format(val)&#123;</span><br><span class="line">return new Date(val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>调用</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;val | format(val)&#125;&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="全局过滤器"   >          <a href="#全局过滤器" class="heading-link"><i class="fas fa-link"></i></a><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h5>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(&#x27;过滤器名&#x27;, ()=&gt;&#123;</span><br><span class="line">回调函数</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure><p>使用过滤器全局格式化日期</p><p>可以使用dayjs插件快速格式化时间</p><p>注意这个过滤器要放在vue实例之前，否则不会生效</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//定义全局过滤器，格式化时间</span><br><span class="line">    Vue.filter(&#x27;dateformat&#x27;,(time)=&gt;&#123;</span><br><span class="line">       //yyyy-MM-dd的日期格式</span><br><span class="line">       //使用dayjs格式化时间</span><br><span class="line">      const dstr=  dayjs(time).format(&#x27;YYYY-MM-DD&#x27;);</span><br><span class="line">      console.log(dstr);</span><br><span class="line">      return dstr;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></div></figure>        <h4 id="侦听器"   >          <a href="#侦听器" class="heading-link"><i class="fas fa-link"></i></a><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h4>      <p>监听数据的变化</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">//监视谁，就把谁作为侦听器名字</span><br><span class="line">username(newVal,oldVal)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>对象形式的监听器</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">username:&#123;</span><br><span class="line">handler(newVal,oldVal)&#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">//是否立即触发</span><br><span class="line">immediate:true，</span><br><span class="line">//深度监听</span><br><span class="line">deep:true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="计算属性"   >          <a href="#计算属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">rgba()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="axios"   >          <a href="#axios" class="heading-link"><i class="fas fa-link"></i></a><a href="#axios" class="headerlink" title="axios"></a>axios</h4>      <p>用于发送网络请求</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  method:&#x27;&#x27;,</span><br><span class="line">  url:&#x27;&#x27;，</span><br><span class="line">  //get参数  ？username=&#x27;&#x27;</span><br><span class="line">  params:&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  //请求体参数，</span><br><span class="line">  data:&#123;&#125;,</span><br><span class="line">&#125;).then((response)=&gt;&#123;&#125;)  //返回的是一个promise对象，可以调用then继续操作</span><br></pre></td></tr></table></div></figure><p>response 对象中的data属性才是服务端返回的值方法返回promise,可以使用await修饰，</p><p>但是方法需要是async,async方法返回的是一个promise对象</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const data= await axios(&#123;</span><br><span class="line">       method:&#x27;get&#x27;,</span><br><span class="line">       //get参数  ？username=&#x27;&#x27;</span><br><span class="line">       params:&#123;</span><br><span class="line">       &#125;,</span><br><span class="line">       //请求体参数</span><br><span class="line">       data:&#123;&#125;,</span><br><span class="line">       url:&#x27;https://www.escook.cn/api/finduser/&#x27;+&#x27;admin&#x27;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></div></figure><p>get</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">axios.get(&#x27;url&#x27;,&#123;</span><br><span class="line">  params:&#123;&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">//具体事例</span><br><span class="line"> //axios get 和post </span><br><span class="line">     axios.get(&#x27;https://api.uomg.com/api/rand.qinghua&#x27;,&#123;</span><br><span class="line">      params:&#123;format:&#x27;json&#x27;&#125;</span><br><span class="line">     &#125;).then((res)=&gt;&#123;</span><br><span class="line">            console.log(res.data);</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>post</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">axios.post(&#x27;url&#x27;,&#123;</span><br><span class="line">username:&#x27;&#x27;,</span><br><span class="line">age:&#x27;&#x27;</span><br><span class="line">&#125;).then(()=&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure><p>挂载axios到Vue实例上</p><p>在main.js中通过原型挂载</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//引入axios</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">Vue.prototype.$axios=axios</span><br></pre></td></tr></table></div></figure><p>调用</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$axios.post()</span><br></pre></td></tr></table></div></figure>        <h4 id="利用Cli安装Vue项目"   >          <a href="#利用Cli安装Vue项目" class="heading-link"><i class="fas fa-link"></i></a><a href="#利用Cli安装Vue项目" class="headerlink" title="利用Cli安装Vue项目"></a>利用Cli安装Vue项目</h4>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i @vue/cli -g</span><br><span class="line">vue create 项目名</span><br></pre></td></tr></table></div></figure><p>自定义安装，选择最后一项</p><p><img src="F:\Blog\source\imgs\cli-1.png"></p><p>选择2.0版本的vue(主流)</p><p>选择less进行样式预处理</p><p>配置文件的创建，选择第一项创建项目，如果项目创建慢，设置为淘宝镜像</p><p>npm run serve 启动项目</p><p><img src="F:\Blog\source\imgs\cli-2.png"></p><p>空格是选择安装的插件，回车则是确定选择项</p>        <h4 id="项目构成"   >          <a href="#项目构成" class="heading-link"><i class="fas fa-link"></i></a><a href="#项目构成" class="headerlink" title="项目构成"></a>项目构成</h4>      <p>assets:存放静态资源，图片，css等内容</p><p>components:存放可以重用的组件</p><p>App.vue项目的跟组件</p><p>main.js程序入口文件</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">  //安装的插件可以在这里使用</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br><span class="line">//这段代码表示，将App里面的内容渲染到index.html中</span><br></pre></td></tr></table></div></figure><p>组件的data不能使用以前的对象写法，而是应该是一个函数，如下</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>组件方法</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">           change()&#123;</span><br><span class="line">               this.msg=&#x27;芝士土拨鼠&#x27;</span><br><span class="line">           &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></div></figure><p>启用less</p><style lang="less"> h1{     background-color: pink;     color: red; } </style>        <h4 id="组件使用"   >          <a href="#组件使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h4>      <p>使用import导入</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//@指的是src目录</span><br><span class="line">import Login from &#x27;@/components/Login.vue&#x27;</span><br></pre></td></tr></table></div></figure><p>使用components节点注册</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">components:&#123;</span><br><span class="line">Login</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>以标签形式使用</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Login&gt;&lt;/Login&gt;</span><br></pre></td></tr></table></div></figure>        <h4 id="全局注册组件"   >          <a href="#全局注册组件" class="heading-link"><i class="fas fa-link"></i></a><a href="#全局注册组件" class="headerlink" title="全局注册组件"></a>全局注册组件</h4>      <p>在main.js下面使用Vue.component(‘注册名称’,’组件名称’)</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Right from &#x27;./components/Right.vue&#x27;</span><br><span class="line">Vue.component(&#x27;MyRight&#x27;,Right)</span><br></pre></td></tr></table></div></figure>        <h4 id="组件之间的数据共享"   >          <a href="#组件之间的数据共享" class="heading-link"><i class="fas fa-link"></i></a><a href="#组件之间的数据共享" class="headerlink" title="组件之间的数据共享"></a>组件之间的数据共享</h4>              <h5 id="props"   >          <a href="#props" class="heading-link"><i class="fas fa-link"></i></a><a href="#props" class="headerlink" title="props"></a>props</h5>      <p>父组件向子组件传值</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//子组件定义props</span><br><span class="line">props:[&#x27;message&#x27;]</span><br><span class="line">在子组件中使用props</span><br><span class="line">this.message</span><br><span class="line">//父组件通过标签传值</span><br><span class="line">&lt;Son :message=&quot;哈哈哈&quot;&gt;&lt;/Son&gt;</span><br></pre></td></tr></table></div></figure><p>默认值（使用默认值定义props）</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">            message:&#123;</span><br><span class="line">                default:&#x27;hhh&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">//type 值类型</span><br><span class="line">props:&#123;</span><br><span class="line">            message:&#123;</span><br><span class="line">                default:&#x27;hhh&#x27;,</span><br><span class="line">//Number，Boolean，String Object， Array等类型</span><br><span class="line">                type:String</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">//require必选</span><br><span class="line"> props:&#123;</span><br><span class="line">            message:&#123;</span><br><span class="line">                default:&#x27;hhh&#x27;,</span><br><span class="line">                type:String,</span><br><span class="line">                require:false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="子传父"   >          <a href="#子传父" class="heading-link"><i class="fas fa-link"></i></a><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h5>      <p>需要在子组件中定义事件</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getName()&#123;</span><br><span class="line">this.$emit(&#x27;numChange&#x27;,&#x27;传递的值&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>父组件中</p><p>调用numChange方法</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;NewSon @numChange=&quot;getNewName&quot;&gt;&lt;/NewSon&gt;</span><br><span class="line">//将子组件传递过来的值接受并转存</span><br><span class="line">  getNewName(val)&#123;</span><br><span class="line">      this.name=val</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="兄弟传值"   >          <a href="#兄弟传值" class="heading-link"><i class="fas fa-link"></i></a><a href="#兄弟传值" class="headerlink" title="兄弟传值"></a>兄弟传值</h5>      <p><img src="F:\Blog\source\imgs\buts.png"></p>        <h4 id="样式冲突"   >          <a href="#样式冲突" class="heading-link"><i class="fas fa-link"></i></a><a href="#样式冲突" class="headerlink" title="样式冲突"></a>样式冲突</h4>      <p>给属性添加scoped属性，默认会给组件的所有标签添加一个自定义属性，不会影响到其他组件的样式</p><style lang="less" scoped>![](F:\Blog\source\imgs\smzqi.png)beforeCreate:props，data，method还没创建，不能被使用create：组件刚刚创建，props，data，method创建了，能被使用，模板尚未创建（dom结构尚未创建），常用发送请求beforeMount：mounted：渲染DOM结构beforeUpdate：数据发生变化时触发，但是不会改变DOMupdated：已经是最新的数据和UIdestroy：销毁阶段DOM元素引用this.$ref.xxx<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 ref=&quot;myh1&quot;&gt;这是子组件&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">change()&#123;</span><br><span class="line"> this.$refs.myh1.style.color=&#x27;red&#x27;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>#### this.$nextTick(callback)延迟函数到下一次DOM结构更新再回调<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//获取文本焦点</span><br><span class="line">             this.$nextTick(()=&gt;&#123;</span><br><span class="line">               this.$refs.inpRef.focus()</span><br><span class="line">             &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>为什么不写在update中？因为每次数据更新都会触发update函数，然而这里数据会更新两次，第二次更新#### js处理数组的方法forEach()遍历整个数组，不会停下<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach((item,index)=&gt;&#123;</span><br><span class="line">               console.log(item);</span><br><span class="line">               console.log(index);</span><br><span class="line">           &#125;)</span><br></pre></td></tr></table></div></figure>some()遍历，不会遍历到低<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr.some((item)=&gt;&#123;</span><br><span class="line">                   console.log(item);</span><br><span class="line">                   if(item == &#x27;arr2&#x27;)&#123;</span><br><span class="line">                       return true;</span><br><span class="line">                   &#125;</span><br><span class="line">           &#125;)</span><br></pre></td></tr></table></div></figure>every()判断每一项<figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flag= arr.<span class="title function_">every</span>(<span class="function"><span class="params">item</span>=&gt;</span>item.<span class="property">state</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag);</span><br></pre></td></tr></table></div></figure>reduce累加方法，接受一个累加器和一个初始值，不断累加<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce((item,total)=&gt;return total+=item.price,0)</span><br></pre></td></tr></table></div></figure>#### 动态组件<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;</span><br></pre></td></tr></table></div></figure>动态获取comName,通过这种方式可以实现动态切换组件动态切换组件会销毁实例，可以使用keep-alive保持组件的存活<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">      &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></div></figure>这个组件会触发两个生命周期函数deactivated:组件缓存activated：激活时触发指定组件缓存 ： include，多组件之间使用,分隔开  exclude=""不缓存那些组件，不能同时使用<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;Son,Test&quot;&gt;</span><br><span class="line">      &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></div></figure>#### 插槽允许把用户不确定的内容定义为插槽，动态指定标签平时在自定义组件的html标签会被忽略，但是可以通过插槽的方式实现渲染每个slot插槽建议定义一个名称<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot :name=&quot;&quot;&gt;&lt;/slot&gt;</span><br></pre></td></tr></table></div></figure>将内容填充到具体插槽中<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-slot:father&gt;</span><br><span class="line">    &lt;p&gt;这是father组件的插槽&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></div></figure>v-slot简写 #，只能用在组件或者template组件上，如果不用这个属性，不需要template包裹作用域插槽在封装组件时，为预留的slot提供属性的插槽，就称为作用域插槽<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Father&gt;</span><br><span class="line">      &lt;template #father=&quot;obj&quot;&gt;</span><br><span class="line">        &lt;p&gt;这是father组件的插槽&lt;/p&gt;</span><br><span class="line">         &#123;&#123; obj.msg&#125;&#125;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">&lt;/Father&gt;</span><br><span class="line">//插槽</span><br><span class="line">&lt;slot name=&quot;father&quot; msg=&quot;这是msg&quot;&gt;&lt;/slot&gt;</span><br></pre></td></tr></table></div></figure>#### 自定义指令<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">directives:&#123;</span><br><span class="line">  //指令名称</span><br><span class="line">  color:&#123;</span><br><span class="line">     //指令执行的函数</span><br><span class="line">     //binding对象有个value属性，就是指令上面传递的参数</span><br><span class="line">     color(el,binding)&#123;</span><br><span class="line">      el.style.color=binding.value</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>#### 全局自定义指令<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//使用全局自定义指令 </span><br><span class="line">Vue.directive(&#x27;color&#x27;,(el,binding)=&gt;&#123;    el.style.color=binding.value &#125;)</span><br></pre></td></tr></table></div></figure>#### 路由在地址中，#后面的属于hash地址。路由就是hash地址和不同组件之间的对应关系。**路由配置:**编写配置文件，并导出实例<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;;</span><br><span class="line">import vueRouter from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">//使用路由</span><br><span class="line">Vue.use(vueRouter);</span><br><span class="line"></span><br><span class="line">//创建实例</span><br><span class="line">const router =new vueRouter();</span><br><span class="line"></span><br><span class="line">//向外共享一个router实例</span><br><span class="line">export default router</span><br></pre></td></tr></table></div></figure>**在main.js中使用**<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import router from &#x27;@/router/index.js&#x27;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></div></figure>**router-view组件**起到占位符的作用，点击链接，链接内容展示在这个占位符里面，路由对应关系的编写，编写路由与组件的对应关系<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//先导入组件，再使用</span><br><span class="line">//创建实例</span><br><span class="line">const router =new vueRouter(&#123;</span><br><span class="line">    routes:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:&#x27;/right&#x27;,</span><br><span class="line">            component:Right,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:&#x27;/son&#x27;,</span><br><span class="line">            component:Son,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure>使用router-link代替a链接，可以不再使用#标识hash值<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/right&quot;&gt;右组件&lt;/router-link&gt;</span><br></pre></td></tr></table></div></figure>路由重定向(强制跳转)<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">           path:&#x27;/&#x27;,</span><br><span class="line">           redirect:&#x27;/login&#x27;</span><br><span class="line">           </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></div></figure>**嵌套路由**<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">            path:&#x27;/son&#x27;,</span><br><span class="line">            component:Son,</span><br><span class="line">            children:[</span><br><span class="line">                &#123;path:&#x27;/newson&#x27;, component:newSon&#125;</span><br><span class="line">            ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></div></figure>children里面那个子路由的path属性为空，则为默认子路由**动态路由匹配**<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//动态路由</span><br><span class="line">        &#123;</span><br><span class="line">            //id值可以动态匹配到不同页面</span><br><span class="line">            path:&#x27;/movie/:id&#x27;,</span><br><span class="line">            component:movie,</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></div></figure>route对象![](F:\Blog\source\imgs\route.png)发现传递的id值可以通过this.$route.params.id获取，query是路由中的?参数#### 导航声明式导航：通过标签实现跳转的编程式导航：通过js代码实现跳转的认识router对象，router是一个导航对象，提供一系列导航方法this.$router.push()跳转到指定路径，并添加一条历史记录（history）this.$router.replace()跳转到指定路径，替换到当前地址this.$router.go(数值n)在浏览历史中中前进或者后退，可以使用简化的方法forward和back方法**导航守卫**![](F:\Blog\source\imgs\router.png)<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//全局前置路由守卫</span><br><span class="line">//只要出现路由跳转，就会触发这个路由守卫的回调函数</span><br><span class="line">router.beforeEach((to,from,next)=&gt;&#123;</span><br><span class="line">//to:将要访问的路由</span><br><span class="line">//from: 即将离开的路由</span><br><span class="line">//next() 表示放行</span><br><span class="line">// console.log(from);</span><br><span class="line">// console.log(to);</span><br><span class="line">//next()函数的三种形式，next()放行，</span><br><span class="line">// next(false)强制停留在当前页面，next(&#x27;/login&#x27;)跳转到指定页面</span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>**模拟登录场景**<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//模拟登录场景</span><br><span class="line">//判断是否为login页，放行</span><br><span class="line">//首页需要登录</span><br><span class="line">//to from 都是一个route对象，里面的path值才是路由hash值</span><br><span class="line">    if(to.path === &#x27;/login&#x27;)&#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        //判断是否已经登录（token）</span><br><span class="line">        //没有登录重定向到login页</span><br><span class="line">        //已经登录则放行</span><br><span class="line">        const token = localStorage.getItem(&#x27;token&#x27;);</span><br><span class="line">        if(token)&#123;</span><br><span class="line">            next();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            next(&#x27;/login&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>**控制页面访问权限**编写一个js文件保存需要控制的数组导入数组判断是否在数组里面js文件<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export default [&#x27;/main&#x27;,&#x27;/movie&#x27;] </span><br><span class="line">//判断 </span><br><span class="line">if(pathArr.indexOf(to.path) === -1)&#123;       </span><br><span class="line">next();</span><br><span class="line">&#125;`</span><br></pre></td></tr></table></div></figure>**路由控制进阶方案**（使用addRoute动态）[vue如何实现路由权限控制 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/55262808)动态创建路由]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/2022/10/03/tags/"/>
      <url>/2022/10/03/tags/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/03/hello-world/"/>
      <url>/2022/10/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <span class="exturl"><a class="exturl__link"   href="https://hexo.io/" >Hexo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>!</p><span id="more"></span>        <h2 id="Quick-Start"   >          <a href="#Quick-Start" class="heading-link"><i class="fas fa-link"></i></a><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2>              <h3 id="Create-a-new-post"   >          <a href="#Create-a-new-post" class="heading-link"><i class="fas fa-link"></i></a><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/writing.html" >Writing</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Run-server"   >          <a href="#Run-server" class="heading-link"><i class="fas fa-link"></i></a><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/server.html" >Server</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Generate-static-files"   >          <a href="#Generate-static-files" class="heading-link"><i class="fas fa-link"></i></a><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/generating.html" >Generating</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Deploy-to-remote-sites"   >          <a href="#Deploy-to-remote-sites" class="heading-link"><i class="fas fa-link"></i></a><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
