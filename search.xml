<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一文详解在线人数统计</title>
      <link href="/2022/10/09/%E4%B8%80%E6%96%87%E8%AF%A6%E8%A7%A3%E5%9C%A8%E7%BA%BF%E4%BA%BA%E6%95%B0%E7%BB%9F%E8%AE%A1/"/>
      <url>/2022/10/09/%E4%B8%80%E6%96%87%E8%AF%A6%E8%A7%A3%E5%9C%A8%E7%BA%BF%E4%BA%BA%E6%95%B0%E7%BB%9F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>在线人数的统计</p><span id="more"></span>        <h4 id="使用场景"   >          <a href="#使用场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4>      <p>在视频场景下，经常可以看到当前有多少人在看，或者某些场景下，需要我们计算直播间的瞬时人数，作为后端人员，sql编写是必须的，但是这种场景的sql在怎么编写呢？</p><p>要实现动态计算访客，可以给sql打一个数据标签，进入（访问）时记录为1，退出时记录为-1。</p>        <h4 id="实现步骤"   >          <a href="#实现步骤" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4>      <p><strong>1、取用户进入直播间时为1，退出为-1。</strong></p><p>这里贴上nowCode原题目</p><p><span class="exturl"><a class="exturl__link"   href="https://www.nowcoder.com/practice/d69677e41f9a4bf3b3ed7a42573e9490" >https://www.nowcoder.com/practice/d69677e41f9a4bf3b3ed7a42573e9490</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">  course_id,</span><br><span class="line">  user_id,</span><br><span class="line">  in_datetime dt,</span><br><span class="line">  1 uv</span><br><span class="line">from</span><br><span class="line">  attend_tb</span><br><span class="line">union all</span><br><span class="line">select</span><br><span class="line">  course_id,</span><br><span class="line">  user_id,</span><br><span class="line">  out_datetime dt,</span><br><span class="line">  -1 uv</span><br><span class="line">from</span><br><span class="line">  attend_tb</span><br><span class="line">)t1</span><br></pre></td></tr></table></div></figure><p>这样可以计算到每个进入或出去的记录的值，方便后面进行计算</p><p>2、<strong>使用窗口函数进行计算</strong></p><p>关于窗口函数，不熟悉的可以前去这个知乎er解析里面看，讲解的十分清晰。</p><p><span class="exturl"><a class="exturl__link"   href="https://zhuanlan.zhihu.com/p/92654574" >通俗易懂的学会：SQL窗口函数 - 知乎 (zhihu.com)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(uv) over(partition by course_id order by dt,uv desc) uv_cnt</span><br></pre></td></tr></table></div></figure><p>关键点：按照日期排序，就可以得到每个时间瞬时进入或出去的人数，使用sum(uv)则可以计算瞬时值，因为需要计算每个课程的瞬时值，所以需要按照课程的id进行分组，这个分组的好处是，不是聚合分组，不会减少行的数量。</p><p><strong>3、 最后计算最大值即可</strong></p><p>贴上完整sql代码</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">course_id,</span><br><span class="line">course_name,</span><br><span class="line">max(uv_cnt) max_num</span><br><span class="line">from </span><br><span class="line">(</span><br><span class="line">select </span><br><span class="line">a.course_id,</span><br><span class="line">course_name,</span><br><span class="line">sum(uv) over(partition by course_id order by dt,uv desc) uv_cnt</span><br><span class="line">from (</span><br><span class="line">select</span><br><span class="line">  course_id,</span><br><span class="line">  user_id,</span><br><span class="line">  in_datetime dt,</span><br><span class="line">  1 uv</span><br><span class="line">from</span><br><span class="line">  attend_tb</span><br><span class="line">union all</span><br><span class="line">select</span><br><span class="line">  course_id,</span><br><span class="line">  user_id,</span><br><span class="line">  out_datetime dt,</span><br><span class="line">  -1 uv</span><br><span class="line">from</span><br><span class="line">  attend_tb</span><br><span class="line">)t1 join course_tb a on t1.course_id=a.course_id</span><br><span class="line">)t2</span><br><span class="line">group by course_id,course_name order by course_id</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js入门到入土</title>
      <link href="/2022/10/03/Vue-js%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
      <url>/2022/10/03/Vue-js%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>Vue学习之旅</p><span id="more"></span>        <h3 id="webpack"   >          <a href="#webpack" class="heading-link"><i class="fas fa-link"></i></a><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3>      <p>前端模块化，解决js兼容问题，项目打包等都需要webpack使用node创建前端工程</p><p><img src="/image.png"></p><p>-D参数 在开发阶段使用的包</p><p>-S参数 在开发上线都需要的包</p><p>webpack配置文件编写：</p><figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports=<span class="punctuation">&#123;</span>    <span class="comment">//开发环境 </span></span><br><span class="line">    development | production    mode<span class="punctuation">:</span>&#x27;development&#x27;</span><br><span class="line"><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></div></figure><p>在package.json文件的scripts脚本加入(可以使用npm运行的脚本)</p><p><code>&quot;dev&quot; :&quot;webpack&quot;</code></p><p>npm run dev 后会发现一个dist文件夹，引入dist&#x2F;main.js文件，即可</p>        <h4 id="两种模式的区别"   >          <a href="#两种模式的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#两种模式的区别" class="headerlink" title="两种模式的区别"></a>两种模式的区别</h4>      <figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">development    开发环境使用，打包速度快</span><br><span class="line">production     上线的时候用，打包慢，但是压缩的文件更小</span><br></pre></td></tr></table></div></figure>        <h4 id="默认约定和改变"   >          <a href="#默认约定和改变" class="heading-link"><i class="fas fa-link"></i></a><a href="#默认约定和改变" class="headerlink" title="默认约定和改变"></a>默认约定和改变</h4>      <p>打包目录：.&#x2F;src&#x2F;index.js</p><p>输出路径    .&#x2F;dist&#x2F;main.js</p><figure class="highlight json"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定处理的文件    </span></span><br><span class="line">entry<span class="punctuation">:</span> path.join(__dirname<span class="punctuation">,</span>&#x27;./src/index.js&#x27;)<span class="punctuation">,</span></span><br><span class="line">output<span class="punctuation">:</span><span class="punctuation">&#123;</span>  path<span class="punctuation">:</span><span class="punctuation">,</span>  filename<span class="punctuation">:</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></div></figure>        <h4 id="安装配置webpack插件"   >          <a href="#安装配置webpack插件" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装配置webpack插件" class="headerlink" title="安装配置webpack插件"></a>安装配置webpack插件</h4>      <p>npm install <span class="exturl"><a class="exturl__link"   href="mailto:&#x77;&#x65;&#98;&#x70;&#x61;&#x63;&#107;&#45;&#100;&#101;&#x76;&#45;&#x73;&#x65;&#114;&#x76;&#x65;&#114;&#64;&#51;&#x2e;&#x31;&#x31;&#x2e;&#x32;" >&#x77;&#x65;&#98;&#x70;&#x61;&#x63;&#107;&#45;&#100;&#101;&#x76;&#45;&#x73;&#x65;&#114;&#x76;&#x65;&#114;&#64;&#51;&#x2e;&#x31;&#x31;&#x2e;&#x32;</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> -D</p><p>更改配置文件“scripts” :”dev serve “</p><p>重新run发现报错更改webpack-cli版本为4.10.0</p><p>安装了webpack-dev-server后，生成的js文件是在内存中的，需要手动引入</p><script src="/main.js"></script><p>html-webpack-plugin 配置完成不用手动进入src的index页面，打开8080就是首页</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入HTML插件 </span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span>=<span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> htmlPlugin=<span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;    </span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    <span class="comment">//指定原文件存放路径    </span></span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span></span><br><span class="line">    <span class="comment">//指定生成文件的存放路径 &#125;)</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span>=&#123;    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,    plugins :[htmlPlugin]   <span class="comment">//通过节点使插件生效 &#125;</span></span><br></pre></td></tr></table></div></figure><p>引入这个插件不需要再手动引入打包过的js文件</p>        <h4 id="devServer节点"   >          <a href="#devServer节点" class="heading-link"><i class="fas fa-link"></i></a><a href="#devServer节点" class="headerlink" title="devServer节点"></a>devServer节点</h4>      <p>设置默认打开浏览器</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">`devServer:&#123;        </span><br><span class="line">open:true,   //是否打开浏览器        </span><br><span class="line">host:&#x27;127.0.0.1&#x27;,   //主机地址        </span><br><span class="line">port: 80     //端口号    </span><br><span class="line"></span><br><span class="line">&#125;`</span><br></pre></td></tr></table></div></figure>        <h4 id="loader"   >          <a href="#loader" class="heading-link"><i class="fas fa-link"></i></a><a href="#loader" class="headerlink" title="loader"></a>loader</h4>      <p>加载css等文件注意：</p><p>如果报错loader找不到先安装</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install style-loader css-loader</span><br></pre></td></tr></table></div></figure><p>配置文件</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module:&#123;</span><br><span class="line">           rules:[</span><br><span class="line">             &#123;test:/\.css$/,use:[&#123; loader: &#x27;style-loader&#x27; &#125;, </span><br><span class="line">             &#123; loader: &#x27;css-loader&#x27; &#125;]&#125;，</span><br><span class="line">             </span><br><span class="line">         ]</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>打包处理less文件</p><p>安装loadernpm i <span class="exturl"><a class="exturl__link"   href="mailto:&#108;&#101;&#x73;&#x73;&#x2d;&#108;&#x6f;&#x61;&#100;&#101;&#114;&#64;&#x31;&#x30;&#x2e;&#48;&#46;&#49;" >&#108;&#101;&#x73;&#x73;&#x2d;&#108;&#x6f;&#x61;&#100;&#101;&#114;&#64;&#x31;&#x30;&#x2e;&#48;&#46;&#49;</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> <span class="exturl"><a class="exturl__link"   href="mailto:&#108;&#101;&#x73;&#115;&#x40;&#x34;&#x2e;&#x31;&#x2e;&#x31;" >&#108;&#101;&#x73;&#115;&#x40;&#x34;&#x2e;&#x31;&#x2e;&#x31;</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> -D</p><p>更改配置文件  图片loader加载需要安装url-loader file-loader</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i url-loader@4.1.1 file-loader@6.2.0 -D</span><br><span class="line"></span><br><span class="line">配置文件</span><br><span class="line">&#123;test:/\.gif|jpg|png$/,user:[&#123;loader:&#x27;url-loader|limit=22229&#x27;&#125;]&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="配置build命令"   >          <a href="#配置build命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#配置build命令" class="headerlink" title="配置build命令"></a>配置build命令</h4>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;build&quot; &quot;webpack --mode production&quot;</span><br></pre></td></tr></table></div></figure>        <h4 id="sourceMap"   >          <a href="#sourceMap" class="heading-link"><i class="fas fa-link"></i></a><a href="#sourceMap" class="headerlink" title="sourceMap"></a>sourceMap</h4>      <p>记录源代码代码的位置信息，以及打包的代码的位置信息更改配置文件中devtool的值即可在调试中输出准确的代码位置</p>        <h3 id="Vue"   >          <a href="#Vue" class="heading-link"><i class="fas fa-link"></i></a><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3>              <h4 id="特点"   >          <a href="#特点" class="heading-link"><i class="fas fa-link"></i></a><a href="#特点" class="headerlink" title="特点"></a>特点</h4>      <p>双向绑定：不操作DOM的前提下，自动把用户填写的数据同步到数据源</p><p>数据驱动视图：页面监听数据，数据发生改变重新渲染页面</p>        <h4 id="MVVM架构"   >          <a href="#MVVM架构" class="heading-link"><i class="fas fa-link"></i></a><a href="#MVVM架构" class="headerlink" title="MVVM架构"></a>MVVM架构</h4>      <p>Model：数据源</p><p>View：当前页面所渲染的DOM结构</p><p>ViewModel ：vue实例</p>        <h4 id="使用步骤"   >          <a href="#使用步骤" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4>      <p>1、导入vue.js脚本文件</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot; https://cdn.staticfile.org/vue/2.6.12/vue.min.js&quot;&gt;&lt;/script&gt;`</span><br><span class="line"></span><br><span class="line">页面中声明一个被vue控制的DOM区域</span><br><span class="line"></span><br><span class="line">`&lt;div id=&quot;app&quot;&gt;&#123;&#123; message &#125;&#125;`</span><br><span class="line"></span><br><span class="line">创建vm实例对象</span><br><span class="line"></span><br><span class="line">``` vue</span><br><span class="line">const vm=new Vue(&#123;</span><br><span class="line">        el:&#x27;#app&#x27;,   //控制区域</span><br><span class="line">        data:&#123;       //数据源</span><br><span class="line">            message:&#x27;李四&#x27;,</span><br><span class="line">            list:[&#x27;1&#x27;,&#x27;2&#x27;],</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="内容渲染指令"   >          <a href="#内容渲染指令" class="heading-link"><i class="fas fa-link"></i></a><a href="#内容渲染指令" class="headerlink" title="内容渲染指令"></a>内容渲染指令</h4>              <h5 id="v-text"   >          <a href="#v-text" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h5>      <p>渲染值到标签中，但是会覆盖原有内容</p>        <h5 id="插值表达式"   >          <a href="#插值表达式" class="heading-link"><i class="fas fa-link"></i></a><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h5>      <p>作用同上，但是不会覆盖原来的内容</p>        <h5 id="v-html"   >          <a href="#v-html" class="heading-link"><i class="fas fa-link"></i></a><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h5>      <p>渲染文本和HTML标签</p>        <h4 id="属性绑定指令"   >          <a href="#属性绑定指令" class="heading-link"><i class="fas fa-link"></i></a><a href="#属性绑定指令" class="headerlink" title="属性绑定指令"></a>属性绑定指令</h4>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">注意：插值表达式不能用在属性节点中，只能用在内容节点</span><br><span class="line">&lt;input type=&quot;text&quot; v-bind:placeholder=&quot;tips&quot;&gt;</span><br><span class="line">使用v-bind可以动态绑定属性，给那个属性绑定，就在哪个属性前面加上v-bind:，可以简写为：，例如:src</span><br><span class="line">插值表达式和v-bind可以进行简单运算</span><br><span class="line">&lt;div&gt;&#123;&#123;msg.split(&#x27;&#x27;).reverse()&#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="事件绑定"   >          <a href="#事件绑定" class="heading-link"><i class="fas fa-link"></i></a><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4>      <p>vue提供了v-on指令进行事件绑定</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-on:click=&quot;add&quot;&gt;+1&lt;/button&gt;   //:后面声明事件的类型</span><br></pre></td></tr></table></div></figure><p>并且vue提供methods对象允许我们定义js方法</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> methods:&#123;</span><br><span class="line">         add:function()&#123;</span><br><span class="line">            console.log(&#x27;ok&#x27;);</span><br><span class="line">            this.count++;</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">//简写</span><br><span class="line">add()&#123;</span><br><span class="line">    this.count++;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>通过this访问数据源中的对象</p><p>因为this指向的是Vue对象，可以使用this代替vue实例访问数据源中的值</p><p>简写以及传参</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;add(1)&quot;&gt;+1&lt;/button&gt;</span><br></pre></td></tr></table></div></figure><p>$event事件绑定</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//事件没有传递参数，则会有一个默认事件对象</span><br><span class="line"> add(e)&#123;</span><br><span class="line">            this.count++;</span><br><span class="line">            console.log(e);</span><br><span class="line">            console.log(e.target);</span><br><span class="line">         &#125;</span><br><span class="line">======控制台打印如下结果</span><br></pre></td></tr></table></div></figure><p><img src="F:\Blog\source\imgs\events.png"></p><p>但是如果方法传递了参数，就会覆盖这个事件对象可以通过vue内置对象，$event传入事件对象</p>        <h4 id="事件修饰符"   >          <a href="#事件修饰符" class="heading-link"><i class="fas fa-link"></i></a><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4>      <p>原生js中，我们可以通过事件的方法阻止事件默认行为和事件冒泡。在vue中提供的更加方便的实现:事件修饰符</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@click.prevent     //.prevent就可以阻止默认行为</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p><img src="/xiushifu.png"></p><p>按键修饰符</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; @keyup.enter=&quot;append&quot; placeholder=&quot;请输入&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="双向绑定"   >          <a href="#双向绑定" class="heading-link"><i class="fas fa-link"></i></a><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h4>      <p>双向数据绑定，vue提供v-model进行数据绑定，通过这个指令，用户在视图上面对数据的修改，可以被数据源感知到并更新，从而不用操作DOM。</p><p>v-bind:单向数据绑定，数据源改变会导致页面数据改变，但是反过来却不会</p><p>表单元素才能使用v-model指令，例如input,select,textareav-model修饰符</p><p> v-model会自动判断需要双向绑定的值，radio绑定的是checked属性，text则绑定value属性</p><p><img src="F:\Blog\source\imgs\vmodel.png"></p>        <h4 id="条件渲染"   >          <a href="#条件渲染" class="heading-link"><i class="fas fa-link"></i></a><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4>      <p>vue提供条件渲染v-if和v-show进行动态控制组件的展示</p><p>v-if</p><p>动态移除元素或者创建元素</p><p>v-show</p><p>添加和移除display:none元素</p><p>v-else搭配v-if使用</p><p><img src="F:\Blog\source\imgs\vif.png"></p>        <h4 id="列表渲染"   >          <a href="#列表渲染" class="heading-link"><i class="fas fa-link"></i></a><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h4>      <p>vue提供v-for进行对列表的渲染，渲染到哪个元素给那个元素添加v-for格式形如</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr v-for=&quot;index in list&quot;&gt;</span><br></pre></td></tr></table></div></figure><p>另外，v-for提供了一个可选参数，返回当前的索引</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr v-for=&quot;(item,index) in list&quot;&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123;index&#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123;item.age&#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123;item.sex&#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></div></figure><p>官方推荐使用v-for绑定一个key值，为每个对象的item值</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr v-for=&quot;(item,index) in list&quot; :key=&quot;item.id&quot;&gt;</span><br></pre></td></tr></table></div></figure><p><u>复习js删除</u></p><p>filter函数接受一个回调函数，返回的是过滤的条件</p><figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">list</span>=<span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="keyword">return</span> item.<span class="property">id</span> !== id)</span><br></pre></td></tr></table></div></figure>        <h4 id="过滤器"   >          <a href="#过滤器" class="heading-link"><i class="fas fa-link"></i></a><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4>      <p>只能在vue2.0中使用，常用于文本格式化</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filters:&#123;</span><br><span class="line">format(val)&#123;</span><br><span class="line">return new Date(val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>调用</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;val | format(val)&#125;&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="全局过滤器"   >          <a href="#全局过滤器" class="heading-link"><i class="fas fa-link"></i></a><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h5>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(&#x27;过滤器名&#x27;, ()=&gt;&#123;</span><br><span class="line">回调函数</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure><p>使用过滤器全局格式化日期</p><p>可以使用dayjs插件快速格式化时间</p><p>注意这个过滤器要放在vue实例之前，否则不会生效</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//定义全局过滤器，格式化时间</span><br><span class="line">    Vue.filter(&#x27;dateformat&#x27;,(time)=&gt;&#123;</span><br><span class="line">       //yyyy-MM-dd的日期格式</span><br><span class="line">       //使用dayjs格式化时间</span><br><span class="line">      const dstr=  dayjs(time).format(&#x27;YYYY-MM-DD&#x27;);</span><br><span class="line">      console.log(dstr);</span><br><span class="line">      return dstr;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></div></figure>        <h4 id="侦听器"   >          <a href="#侦听器" class="heading-link"><i class="fas fa-link"></i></a><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h4>      <p>监听数据的变化</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">//监视谁，就把谁作为侦听器名字</span><br><span class="line">username(newVal,oldVal)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>对象形式的监听器</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">username:&#123;</span><br><span class="line">handler(newVal,oldVal)&#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">//是否立即触发</span><br><span class="line">immediate:true，</span><br><span class="line">//深度监听</span><br><span class="line">deep:true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="计算属性"   >          <a href="#计算属性" class="heading-link"><i class="fas fa-link"></i></a><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">rgba()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="axios"   >          <a href="#axios" class="heading-link"><i class="fas fa-link"></i></a><a href="#axios" class="headerlink" title="axios"></a>axios</h4>      <p>用于发送网络请求</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  method:&#x27;&#x27;,</span><br><span class="line">  url:&#x27;&#x27;，</span><br><span class="line">  //get参数  ？username=&#x27;&#x27;</span><br><span class="line">  params:&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  //请求体参数，</span><br><span class="line">  data:&#123;&#125;,</span><br><span class="line">&#125;).then((response)=&gt;&#123;&#125;)  //返回的是一个promise对象，可以调用then继续操作</span><br></pre></td></tr></table></div></figure><p>response 对象中的data属性才是服务端返回的值方法返回promise,可以使用await修饰，</p><p>但是方法需要是async,async方法返回的是一个promise对象</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const data= await axios(&#123;</span><br><span class="line">       method:&#x27;get&#x27;,</span><br><span class="line">       //get参数  ？username=&#x27;&#x27;</span><br><span class="line">       params:&#123;</span><br><span class="line">       &#125;,</span><br><span class="line">       //请求体参数</span><br><span class="line">       data:&#123;&#125;,</span><br><span class="line">       url:&#x27;https://www.escook.cn/api/finduser/&#x27;+&#x27;admin&#x27;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></div></figure><p>get</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">axios.get(&#x27;url&#x27;,&#123;</span><br><span class="line">  params:&#123;&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">//具体事例</span><br><span class="line"> //axios get 和post </span><br><span class="line">     axios.get(&#x27;https://api.uomg.com/api/rand.qinghua&#x27;,&#123;</span><br><span class="line">      params:&#123;format:&#x27;json&#x27;&#125;</span><br><span class="line">     &#125;).then((res)=&gt;&#123;</span><br><span class="line">            console.log(res.data);</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>post</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">axios.post(&#x27;url&#x27;,&#123;</span><br><span class="line">username:&#x27;&#x27;,</span><br><span class="line">age:&#x27;&#x27;</span><br><span class="line">&#125;).then(()=&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure><p>挂载axios到Vue实例上</p><p>在main.js中通过原型挂载</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//引入axios</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">Vue.prototype.$axios=axios</span><br></pre></td></tr></table></div></figure><p>调用</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$axios.post()</span><br></pre></td></tr></table></div></figure>        <h4 id="利用Cli安装Vue项目"   >          <a href="#利用Cli安装Vue项目" class="heading-link"><i class="fas fa-link"></i></a><a href="#利用Cli安装Vue项目" class="headerlink" title="利用Cli安装Vue项目"></a>利用Cli安装Vue项目</h4>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i @vue/cli -g</span><br><span class="line">vue create 项目名</span><br></pre></td></tr></table></div></figure><p>自定义安装，选择最后一项</p><p><img src="F:\Blog\source\imgs\cli-1.png"></p><p>选择2.0版本的vue(主流)</p><p>选择less进行样式预处理</p><p>配置文件的创建，选择第一项创建项目，如果项目创建慢，设置为淘宝镜像</p><p>npm run serve 启动项目</p><p><img src="F:\Blog\source\imgs\cli-2.png"></p><p>空格是选择安装的插件，回车则是确定选择项</p>        <h4 id="项目构成"   >          <a href="#项目构成" class="heading-link"><i class="fas fa-link"></i></a><a href="#项目构成" class="headerlink" title="项目构成"></a>项目构成</h4>      <p>assets:存放静态资源，图片，css等内容</p><p>components:存放可以重用的组件</p><p>App.vue项目的跟组件</p><p>main.js程序入口文件</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">  //安装的插件可以在这里使用</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br><span class="line">//这段代码表示，将App里面的内容渲染到index.html中</span><br></pre></td></tr></table></div></figure><p>组件的data不能使用以前的对象写法，而是应该是一个函数，如下</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>组件方法</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">           change()&#123;</span><br><span class="line">               this.msg=&#x27;芝士土拨鼠&#x27;</span><br><span class="line">           &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></div></figure><p>启用less</p><style lang="less"> h1{     background-color: pink;     color: red; } </style>        <h4 id="组件使用"   >          <a href="#组件使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h4>      <p>使用import导入</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//@指的是src目录</span><br><span class="line">import Login from &#x27;@/components/Login.vue&#x27;</span><br></pre></td></tr></table></div></figure><p>使用components节点注册</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">components:&#123;</span><br><span class="line">Login</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>以标签形式使用</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Login&gt;&lt;/Login&gt;</span><br></pre></td></tr></table></div></figure>        <h4 id="全局注册组件"   >          <a href="#全局注册组件" class="heading-link"><i class="fas fa-link"></i></a><a href="#全局注册组件" class="headerlink" title="全局注册组件"></a>全局注册组件</h4>      <p>在main.js下面使用Vue.component(‘注册名称’,’组件名称’)</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Right from &#x27;./components/Right.vue&#x27;</span><br><span class="line">Vue.component(&#x27;MyRight&#x27;,Right)</span><br></pre></td></tr></table></div></figure>        <h4 id="组件之间的数据共享"   >          <a href="#组件之间的数据共享" class="heading-link"><i class="fas fa-link"></i></a><a href="#组件之间的数据共享" class="headerlink" title="组件之间的数据共享"></a>组件之间的数据共享</h4>              <h5 id="props"   >          <a href="#props" class="heading-link"><i class="fas fa-link"></i></a><a href="#props" class="headerlink" title="props"></a>props</h5>      <p>父组件向子组件传值</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//子组件定义props</span><br><span class="line">props:[&#x27;message&#x27;]</span><br><span class="line">在子组件中使用props</span><br><span class="line">this.message</span><br><span class="line">//父组件通过标签传值</span><br><span class="line">&lt;Son :message=&quot;哈哈哈&quot;&gt;&lt;/Son&gt;</span><br></pre></td></tr></table></div></figure><p>默认值（使用默认值定义props）</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">            message:&#123;</span><br><span class="line">                default:&#x27;hhh&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">//type 值类型</span><br><span class="line">props:&#123;</span><br><span class="line">            message:&#123;</span><br><span class="line">                default:&#x27;hhh&#x27;,</span><br><span class="line">//Number，Boolean，String Object， Array等类型</span><br><span class="line">                type:String</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">//require必选</span><br><span class="line"> props:&#123;</span><br><span class="line">            message:&#123;</span><br><span class="line">                default:&#x27;hhh&#x27;,</span><br><span class="line">                type:String,</span><br><span class="line">                require:false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="子传父"   >          <a href="#子传父" class="heading-link"><i class="fas fa-link"></i></a><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h5>      <p>需要在子组件中定义事件</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getName()&#123;</span><br><span class="line">this.$emit(&#x27;numChange&#x27;,&#x27;传递的值&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>父组件中</p><p>调用numChange方法</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;NewSon @numChange=&quot;getNewName&quot;&gt;&lt;/NewSon&gt;</span><br><span class="line">//将子组件传递过来的值接受并转存</span><br><span class="line">  getNewName(val)&#123;</span><br><span class="line">      this.name=val</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="兄弟传值"   >          <a href="#兄弟传值" class="heading-link"><i class="fas fa-link"></i></a><a href="#兄弟传值" class="headerlink" title="兄弟传值"></a>兄弟传值</h5>      <p><img src="F:\Blog\source\imgs\buts.png"></p>        <h4 id="样式冲突"   >          <a href="#样式冲突" class="heading-link"><i class="fas fa-link"></i></a><a href="#样式冲突" class="headerlink" title="样式冲突"></a>样式冲突</h4>      <p>给属性添加scoped属性，默认会给组件的所有标签添加一个自定义属性，不会影响到其他组件的样式</p><style lang="less" scoped>![](F:\Blog\source\imgs\smzqi.png)beforeCreate:props，data，method还没创建，不能被使用create：组件刚刚创建，props，data，method创建了，能被使用，模板尚未创建（dom结构尚未创建），常用发送请求beforeMount：mounted：渲染DOM结构beforeUpdate：数据发生变化时触发，但是不会改变DOMupdated：已经是最新的数据和UIdestroy：销毁阶段DOM元素引用this.$ref.xxx<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 ref=&quot;myh1&quot;&gt;这是子组件&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">change()&#123;</span><br><span class="line"> this.$refs.myh1.style.color=&#x27;red&#x27;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>#### this.$nextTick(callback)延迟函数到下一次DOM结构更新再回调<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//获取文本焦点</span><br><span class="line">             this.$nextTick(()=&gt;&#123;</span><br><span class="line">               this.$refs.inpRef.focus()</span><br><span class="line">             &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>为什么不写在update中？因为每次数据更新都会触发update函数，然而这里数据会更新两次，第二次更新#### js处理数组的方法forEach()遍历整个数组，不会停下<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach((item,index)=&gt;&#123;</span><br><span class="line">               console.log(item);</span><br><span class="line">               console.log(index);</span><br><span class="line">           &#125;)</span><br></pre></td></tr></table></div></figure>some()遍历，不会遍历到低<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr.some((item)=&gt;&#123;</span><br><span class="line">                   console.log(item);</span><br><span class="line">                   if(item == &#x27;arr2&#x27;)&#123;</span><br><span class="line">                       return true;</span><br><span class="line">                   &#125;</span><br><span class="line">           &#125;)</span><br></pre></td></tr></table></div></figure>every()判断每一项<figure class="highlight js"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flag= arr.<span class="title function_">every</span>(<span class="function"><span class="params">item</span>=&gt;</span>item.<span class="property">state</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag);</span><br></pre></td></tr></table></div></figure>reduce累加方法，接受一个累加器和一个初始值，不断累加<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce((item,total)=&gt;return total+=item.price,0)</span><br></pre></td></tr></table></div></figure>#### 动态组件<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;</span><br></pre></td></tr></table></div></figure>动态获取comName,通过这种方式可以实现动态切换组件动态切换组件会销毁实例，可以使用keep-alive保持组件的存活<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">      &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></div></figure>这个组件会触发两个生命周期函数deactivated:组件缓存activated：激活时触发指定组件缓存 ： include，多组件之间使用,分隔开  exclude=""不缓存那些组件，不能同时使用<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;Son,Test&quot;&gt;</span><br><span class="line">      &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></div></figure>#### 插槽允许把用户不确定的内容定义为插槽，动态指定标签平时在自定义组件的html标签会被忽略，但是可以通过插槽的方式实现渲染每个slot插槽建议定义一个名称<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot :name=&quot;&quot;&gt;&lt;/slot&gt;</span><br></pre></td></tr></table></div></figure>将内容填充到具体插槽中<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-slot:father&gt;</span><br><span class="line">    &lt;p&gt;这是father组件的插槽&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></div></figure>v-slot简写 #，只能用在组件或者template组件上，如果不用这个属性，不需要template包裹作用域插槽在封装组件时，为预留的slot提供属性的插槽，就称为作用域插槽<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Father&gt;</span><br><span class="line">      &lt;template #father=&quot;obj&quot;&gt;</span><br><span class="line">        &lt;p&gt;这是father组件的插槽&lt;/p&gt;</span><br><span class="line">         &#123;&#123; obj.msg&#125;&#125;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">&lt;/Father&gt;</span><br><span class="line">//插槽</span><br><span class="line">&lt;slot name=&quot;father&quot; msg=&quot;这是msg&quot;&gt;&lt;/slot&gt;</span><br></pre></td></tr></table></div></figure>#### 自定义指令<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">directives:&#123;</span><br><span class="line">  //指令名称</span><br><span class="line">  color:&#123;</span><br><span class="line">     //指令执行的函数</span><br><span class="line">     //binding对象有个value属性，就是指令上面传递的参数</span><br><span class="line">     color(el,binding)&#123;</span><br><span class="line">      el.style.color=binding.value</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>#### 全局自定义指令<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//使用全局自定义指令 </span><br><span class="line">Vue.directive(&#x27;color&#x27;,(el,binding)=&gt;&#123;    el.style.color=binding.value &#125;)</span><br></pre></td></tr></table></div></figure>#### 路由在地址中，#后面的属于hash地址。路由就是hash地址和不同组件之间的对应关系。**路由配置:**编写配置文件，并导出实例<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;;</span><br><span class="line">import vueRouter from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">//使用路由</span><br><span class="line">Vue.use(vueRouter);</span><br><span class="line"></span><br><span class="line">//创建实例</span><br><span class="line">const router =new vueRouter();</span><br><span class="line"></span><br><span class="line">//向外共享一个router实例</span><br><span class="line">export default router</span><br></pre></td></tr></table></div></figure>**在main.js中使用**<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import router from &#x27;@/router/index.js&#x27;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></div></figure>**router-view组件**起到占位符的作用，点击链接，链接内容展示在这个占位符里面，路由对应关系的编写，编写路由与组件的对应关系<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//先导入组件，再使用</span><br><span class="line">//创建实例</span><br><span class="line">const router =new vueRouter(&#123;</span><br><span class="line">    routes:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:&#x27;/right&#x27;,</span><br><span class="line">            component:Right,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path:&#x27;/son&#x27;,</span><br><span class="line">            component:Son,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure>使用router-link代替a链接，可以不再使用#标识hash值<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/right&quot;&gt;右组件&lt;/router-link&gt;</span><br></pre></td></tr></table></div></figure>路由重定向(强制跳转)<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">           path:&#x27;/&#x27;,</span><br><span class="line">           redirect:&#x27;/login&#x27;</span><br><span class="line">           </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></div></figure>**嵌套路由**<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">            path:&#x27;/son&#x27;,</span><br><span class="line">            component:Son,</span><br><span class="line">            children:[</span><br><span class="line">                &#123;path:&#x27;/newson&#x27;, component:newSon&#125;</span><br><span class="line">            ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></div></figure>children里面那个子路由的path属性为空，则为默认子路由**动态路由匹配**<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//动态路由</span><br><span class="line">        &#123;</span><br><span class="line">            //id值可以动态匹配到不同页面</span><br><span class="line">            path:&#x27;/movie/:id&#x27;,</span><br><span class="line">            component:movie,</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></div></figure>route对象![](F:\Blog\source\imgs\route.png)发现传递的id值可以通过this.$route.params.id获取，query是路由中的?参数#### 导航声明式导航：通过标签实现跳转的编程式导航：通过js代码实现跳转的认识router对象，router是一个导航对象，提供一系列导航方法this.$router.push()跳转到指定路径，并添加一条历史记录（history）this.$router.replace()跳转到指定路径，替换到当前地址this.$router.go(数值n)在浏览历史中中前进或者后退，可以使用简化的方法forward和back方法**导航守卫**![](F:\Blog\source\imgs\router.png)<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//全局前置路由守卫</span><br><span class="line">//只要出现路由跳转，就会触发这个路由守卫的回调函数</span><br><span class="line">router.beforeEach((to,from,next)=&gt;&#123;</span><br><span class="line">//to:将要访问的路由</span><br><span class="line">//from: 即将离开的路由</span><br><span class="line">//next() 表示放行</span><br><span class="line">// console.log(from);</span><br><span class="line">// console.log(to);</span><br><span class="line">//next()函数的三种形式，next()放行，</span><br><span class="line">// next(false)强制停留在当前页面，next(&#x27;/login&#x27;)跳转到指定页面</span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>**模拟登录场景**<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//模拟登录场景</span><br><span class="line">//判断是否为login页，放行</span><br><span class="line">//首页需要登录</span><br><span class="line">//to from 都是一个route对象，里面的path值才是路由hash值</span><br><span class="line">    if(to.path === &#x27;/login&#x27;)&#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        //判断是否已经登录（token）</span><br><span class="line">        //没有登录重定向到login页</span><br><span class="line">        //已经登录则放行</span><br><span class="line">        const token = localStorage.getItem(&#x27;token&#x27;);</span><br><span class="line">        if(token)&#123;</span><br><span class="line">            next();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            next(&#x27;/login&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>**控制页面访问权限**编写一个js文件保存需要控制的数组导入数组判断是否在数组里面js文件<figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export default [&#x27;/main&#x27;,&#x27;/movie&#x27;] </span><br><span class="line">//判断 </span><br><span class="line">if(pathArr.indexOf(to.path) === -1)&#123;       </span><br><span class="line">next();</span><br><span class="line">&#125;`</span><br></pre></td></tr></table></div></figure>**路由控制进阶方案**（使用addRoute动态）[vue如何实现路由权限控制 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/55262808)动态创建路由]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/2022/10/03/tags/"/>
      <url>/2022/10/03/tags/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/03/hello-world/"/>
      <url>/2022/10/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <span class="exturl"><a class="exturl__link"   href="https://hexo.io/" >Hexo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>!</p><span id="more"></span>        <h2 id="Quick-Start"   >          <a href="#Quick-Start" class="heading-link"><i class="fas fa-link"></i></a><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2>              <h3 id="Create-a-new-post"   >          <a href="#Create-a-new-post" class="heading-link"><i class="fas fa-link"></i></a><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/writing.html" >Writing</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Run-server"   >          <a href="#Run-server" class="heading-link"><i class="fas fa-link"></i></a><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/server.html" >Server</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Generate-static-files"   >          <a href="#Generate-static-files" class="heading-link"><i class="fas fa-link"></i></a><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/generating.html" >Generating</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="Deploy-to-remote-sites"   >          <a href="#Deploy-to-remote-sites" class="heading-link"><i class="fas fa-link"></i></a><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></div></figure><p>More info: <span class="exturl"><a class="exturl__link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
